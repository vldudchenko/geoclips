import { supabase } from '../lib/supabase';
import CacheService from './cacheService';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export class UserService {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Supabase
   */
  static handleError(error, context = '') {
    console.error(`UserService Error [${context}]:`, error);
    
    if (error.code === 'PGRST116') {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    if (error.message?.includes('JWT')) {
      throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    throw error;
  }
  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async createOrUpdateUser(userData) {
    try {
      const existingUser = await this.getUserByYandexId(userData.yandex_id, false);
      
      if (existingUser) {
        const { data, error } = await supabase
          .from('users')
          .update(() => {
            const updatePayload = {
              first_name: userData.first_name,
              last_name: userData.last_name,
              display_name: userData.display_name,
              updated_at: new Date().toISOString()
            };
            // –ù–µ —Ç—Ä–æ–≥–∞–µ–º avatar_url, –µ—Å–ª–∏ —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if (typeof userData.avatar_url !== 'undefined') {
              updatePayload.avatar_url = userData.avatar_url;
            }
            return updatePayload;
          })
          .eq('yandex_id', userData.yandex_id)
          .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at')
          .maybeSingle();

        if (error) this.handleError(error, 'updateUser');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        if (data) {
          CacheService.setUserData(`yandex_${userData.yandex_id}`, data, true);
          CacheService.setUserData(`user_${data.id}`, data, true);
        }
        
        return data;
      } else {
        const { data, error } = await supabase
          .from('users')
          .insert([{
            ...userData,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }])
          .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at')
          .maybeSingle();

        if (error) this.handleError(error, 'createUser');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if (data) {
          CacheService.setUserData(`yandex_${userData.yandex_id}`, data, true);
          CacheService.setUserData(`user_${data.id}`, data, true);
        }
        
        return data;
      }
    } catch (error) {
      this.handleError(error, 'createOrUpdateUser');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Yandex ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getUserByYandexId(yandexId, useCache = true) {
    try {
      if (useCache) {
        const cachedUser = CacheService.getUserData(`yandex_${yandexId}`, true);
        if (cachedUser) return cachedUser;
      }

      const { data, error } = await supabase
        .from('users')
        .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at')
        .eq('yandex_id', yandexId)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        this.handleError(error, 'getUserByYandexId');
      }
      
      if (data && useCache) {
        CacheService.setUserData(`yandex_${yandexId}`, data, true);
      }
      
      return data;
    } catch (error) {
      this.handleError(error, 'getUserByYandexId');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getUserById(userId, useCache = true) {
    try {
      if (useCache) {
        const cachedUser = CacheService.getUserData(`user_${userId}`, true);
        if (cachedUser) return cachedUser;
      }

      const { data, error } = await supabase
        .from('users')
        .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at')
        .eq('id', userId)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        this.handleError(error, 'getUserById');
      }
      
      if (data && useCache) {
        CacheService.setUserData(`user_${userId}`, data, true);
      }
      
      return data;
    } catch (error) {
      this.handleError(error, 'getUserById');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ display_name —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getUserByDisplayName(displayName, useCache = true) {
    try {
      console.log('üîç UserService.getUserByDisplayName: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ display_name:', displayName);
      
      if (useCache) {
        const cachedUser = CacheService.getUserData(`display_name_${displayName}`, true);
        if (cachedUser) {
          console.log('‚úÖ UserService.getUserByDisplayName: –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:', cachedUser);
          return cachedUser;
        }
      }

      const { data, error } = await supabase
        .from('users')
        .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at, display_name')
        .eq('display_name', displayName)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        console.error('‚ùå UserService.getUserByDisplayName: –æ—à–∏–±–∫–∞ Supabase:', error);
        this.handleError(error, 'getUserByDisplayName');
      }

      if (data && useCache) {
        CacheService.setUserData(`display_name_${displayName}`, data, true);
      }

      console.log('‚úÖ UserService.getUserByDisplayName: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', data);
      return data;
    } catch (error) {
      console.error('‚ùå UserService.getUserByDisplayName: –æ–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      this.handleError(error, 'getUserByDisplayName');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞
  static async updateUserProfile(userId, profileData) {
    try {
      const { data, error } = await supabase
        .from('users')
        .update(profileData)
        .eq('id', userId)
        .select('id, yandex_id, display_name, avatar_url, first_name, last_name, created_at, updated_at')
        .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle –≤–º–µ—Å—Ç–æ single

      if (error) throw error;
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (data) {
        CacheService.clearUserData(`user_${userId}`, true);
        CacheService.clearUserData(`yandex_${data.yandex_id}`, true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        CacheService.setUserData(`user_${userId}`, data, true);
        CacheService.setUserData(`yandex_${data.yandex_id}`, data, true);
      }
      
      return data;
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserVideos(userId) {
    try {
      console.log('üîç UserService.getUserVideos: –∏—â–µ–º –≤–∏–¥–µ–æ –¥–ª—è userId:', userId);
      const { data, error } = await supabase
        .from('videos')
        .select(`
          id,
          user_id,
          description,
          video_url,
          latitude,
          longitude,
          likes_count,
          views_count,
          created_at,
          updated_at
        `)
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå UserService.getUserVideos: –æ—à–∏–±–∫–∞ Supabase:', error);
        throw error;
      }
      
      console.log('‚úÖ UserService.getUserVideos: –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ:', data?.length || 0, data);
      return data;
    } catch (error) {
      console.error('‚ùå UserService.getUserVideos: –æ–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      throw error;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ø–Ω–¥–µ–∫—Å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  // –í–ê–ñ–ù–û: avatar_url –ù–ï —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
  static async syncUserWithYandex(yandexUserData, forceRefresh = false) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!forceRefresh) {
        const cachedUser = CacheService.getUserData(`yandex_${yandexUserData.id}`, true);
        if (cachedUser) {
          return cachedUser;
        }
      }

      const userData = {
        yandex_id: yandexUserData.id,
        first_name: yandexUserData.first_name,
        last_name: yandexUserData.last_name,
        display_name: yandexUserData.display_name || yandexUserData.real_name,
        // –ù–ï —Ñ–æ—Ä–º–∏—Ä—É–µ–º avatar_url –∑–¥–µ—Å—å - –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ avatarService
        // –ï—Å–ª–∏ –µ—Å—Ç—å avatar_url –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        avatar_url: yandexUserData.avatar_url || null
      };

      const result = await this.createOrUpdateUser(userData);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (result) {
        CacheService.setUserData(`yandex_${userData.yandex_id}`, result, true);
        CacheService.setUserData(`user_${result.id}`, result, true);
      }
      
      return result;
    } catch (error) {
      console.error('Error syncing user with Yandex:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async refreshUserCache(userId, yandexId = null) {
    try {
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
      CacheService.clearUserData(`user_${userId}`, true);
      if (yandexId) {
        CacheService.clearUserData(`yandex_${yandexId}`, true);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      const freshData = await this.getUserById(userId, false);
      
      if (freshData) {
        // –ö—ç—à–∏—Ä—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        CacheService.setUserData(`user_${userId}`, freshData, true);
        if (freshData.yandex_id) {
          CacheService.setUserData(`yandex_${freshData.yandex_id}`, freshData, true);
        }
      }
      
      return freshData;
    } catch (error) {
      console.error('Error refreshing user cache:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  static clearAllUserCache() {
    CacheService.clearAllCache();
  }
}
