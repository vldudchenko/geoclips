// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Yandex ID

import { ServerApi } from './services/serverApi';
import { UserService } from './services/userService';
import CacheService from './services/cacheService';

// –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getUserDataExample(accessToken) {
  try {
    console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    const result1 = await ServerApi.getYandexUserData(accessToken);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç 1:', result1.fromCache ? '–∏–∑ –∫—ç—à–∞' : '—Å —Å–µ—Ä–≤–µ—Ä–∞');
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏–∑ –∫—ç—à–∞
    const result2 = await ServerApi.getYandexUserData(accessToken);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç 2:', result2.fromCache ? '–∏–∑ –∫—ç—à–∞' : '—Å —Å–µ—Ä–≤–µ—Ä–∞');
    
    return result2.userData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
async function refreshUserDataExample(accessToken) {
  try {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à
    const freshData = await ServerApi.getYandexUserData(accessToken, true);
    console.log('–°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', freshData.fromCache ? '–∏–∑ –∫—ç—à–∞' : '—Å —Å–µ—Ä–≤–µ—Ä–∞');
    
    return freshData.userData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å UserService –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function userServiceExample(yandexId, userId) {
  try {
    console.log('–†–∞–±–æ—Ç–∞ —Å UserService...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Yandex ID (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const userByYandex = await UserService.getUserByYandexId(yandexId);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Yandex ID:', userByYandex);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const userById = await UserService.getUserById(userId);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID:', userById);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞)
    const updatedUser = await UserService.updateUserProfile(userId, {
      display_name: '–ù–æ–≤–æ–µ –∏–º—è'
    });
    console.log('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser);
    
    return updatedUser;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å UserService:', error);
    throw error;
  }
}

// –ü—Ä–∏–º–µ—Ä 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
function cacheManagementExample() {
  console.log('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
  const hasCache = CacheService.hasValidCache('user_123');
  console.log('–ï—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à:', hasCache);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—ç—à–∞
  const cachedData = CacheService.getUserDataFromAnyCache('user_123');
  console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:', cachedData);
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  CacheService.clearUserData('user_123', true);
  console.log('–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω');
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  CacheService.clearAllCache();
  console.log('–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω');
}

// –ü—Ä–∏–º–µ—Ä 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback
async function errorHandlingExample(accessToken) {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    const userId = ServerApi.extractUserIdFromToken(accessToken);
    const cachedData = CacheService.getUserDataFromAnyCache(userId);
    
    if (cachedData) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
      return cachedData;
    }
    
    // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('–ö—ç—à –ø—É—Å—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
    const serverData = await ServerApi.getYandexUserData(accessToken);
    
    if (serverData.success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      CacheService.setUserData(userId, serverData.userData, true);
      return serverData.userData;
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    
    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      id: 'unknown',
      firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      lastName: '',
      displayName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      avatar: null
    };
  }
}

// –ü—Ä–∏–º–µ—Ä 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function performanceMonitoringExample(accessToken) {
  const startTime = performance.now();
  
  try {
    const result = await ServerApi.getYandexUserData(accessToken);
    const endTime = performance.now();
    
    const metrics = {
      responseTime: endTime - startTime,
      fromCache: result.fromCache,
      timestamp: new Date().toISOString()
    };
    
    console.log('–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', metrics);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (metrics.fromCache) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –∑–∞', metrics.responseTime.toFixed(2), '–º—Å');
    } else {
      console.log('üåê –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞', metrics.responseTime.toFixed(2), '–º—Å');
    }
    
    return { result, metrics };
    
  } catch (error) {
    const endTime = performance.now();
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞', (endTime - startTime).toFixed(2), '–º—Å:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export {
  getUserDataExample,
  refreshUserDataExample,
  userServiceExample,
  cacheManagementExample,
  errorHandlingExample,
  performanceMonitoringExample
};
