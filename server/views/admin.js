// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allTags = [];
let filteredTags = [];
let selectedVideoIds = [];
let currentUsersPage = 0;
let currentVideosPage = 0;
const ITEMS_PER_PAGE = 20;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const selectedTab = document.getElementById(`tab-${tabName}`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    switch(tabName) {
        case 'dashboard':
            loadStats();
            loadDashboardChart();
            break;
        case 'analytics':
            loadAnalytics();
            break;
        case 'users':
            loadUsers();
            break;
        case 'videos':
            loadVideos();
            break;
        case 'tags':
            loadTags();
            break;
        case 'system':
            loadSystemInfo();
            break;
        case 'logs':
            loadActivityLogs();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch('/admin/stats');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        document.getElementById('users-count').textContent = data.usersCount || 0;
        document.getElementById('videos-count').textContent = data.videosCount || 0;
        document.getElementById('total-views').textContent = data.totalViews || 0;
        document.getElementById('total-likes').textContent = data.totalLikes || 0;
        document.getElementById('tags-count').textContent = data.tagsCount || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboardChart() {
    try {
        const response = await fetch('/admin/analytics');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
        const chartContainer = document.getElementById('dashboard-chart');
        chartContainer.innerHTML = `
            <div class="stats-summary">
                <p><strong>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</strong></p>
                <p>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.period.last7Days.users}</p>
                <p>–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ: ${data.period.last7Days.videos}</p>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function loadAnalytics() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...', 'info');
        
        const response = await fetch('/admin/analytics');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–æ–≤
        document.getElementById('analytics-users-7d').textContent = data.period.last7Days.users;
        document.getElementById('analytics-videos-7d').textContent = data.period.last7Days.videos;
        document.getElementById('analytics-users-30d').textContent = data.period.last30Days.users;
        document.getElementById('analytics-videos-30d').textContent = data.period.last30Days.videos;
        
        // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const topUsersList = document.getElementById('top-users-list');
        if (data.topUsers && data.topUsers.length > 0) {
            topUsersList.innerHTML = data.topUsers.map((user, index) => `
                <div class="top-item">
                    <span class="rank">#${index + 1}</span>
                    <span class="name">${user.user_name}</span>
                    <span class="count">${user.videos_count} –≤–∏–¥–µ–æ</span>
                </div>
            `).join('');
        } else {
            topUsersList.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        }
        
        // –¢–æ–ø –≤–∏–¥–µ–æ
        const topVideosList = document.getElementById('top-videos-list');
        if (data.topVideos && data.topVideos.length > 0) {
            topVideosList.innerHTML = data.topVideos.map((video, index) => `
                <div class="top-item">
                    <span class="rank">#${index + 1}</span>
                    <span class="name">${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</span>
                    <span class="count">üëÅ ${video.views_count} ‚ù§ ${video.likes_count}</span>
                </div>
            `).join('');
        } else {
            topVideosList.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        }
        
        showNotification('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    const container = document.getElementById('users-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
    
    try {
        const response = await fetch('/admin/users');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const users = Array.isArray(data.users) ? data.users : 
                     Array.isArray(data) ? data : [];
        
        if (users.length === 0) {
            container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        displayUsers(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}</div>`;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function displayUsers(users) {
    const container = document.getElementById('users-container');
    
    const table = `
        <table class="data-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>–ê–≤–∞—Ç–∞—Ä</th>
                    <th>–ò–º—è</th>
                    <th>–õ–æ–≥–∏–Ω</th>
                    <th>–í–∏–¥–µ–æ</th>
                    <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${users.map(user => `
                    <tr>
                        <td>${user.id.substring(0, 8)}...</td>
                        <td>
                            ${user.avatar_url ? 
                                `<img src="${user.avatar_url}" class="avatar" alt="–ê–≤–∞—Ç–∞—Ä">` : 
                                `<div class="avatar-placeholder">üë§</div>`
                            }
                        </td>
                        <td>${user.first_name || ''} ${user.last_name || ''}</td>
                        <td>${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</td>
                        <td><span class="video-count">${user.videos_count || 0}</span></td>
                        <td>${new Date(user.created_at).toLocaleDateString('ru-RU')}</td>
                        <td>
                            <button class="btn btn-small" onclick="viewUserVideos('${user.id}')">
                                üìπ –í–∏–¥–µ–æ
                            </button>
                            <button class="btn btn-small btn-danger" onclick="deleteUser('${user.id}', '${(user.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace(/'/g, "\\'")}')">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = table;
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function searchUsers() {
    const query = document.getElementById('users-search').value;
    const sortBy = document.getElementById('users-sort').value;
    const order = document.getElementById('users-order').value;
    
    const container = document.getElementById('users-container');
    container.innerHTML = '<div class="loading">–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
    
    try {
        const params = new URLSearchParams({
            query,
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentUsersPage * ITEMS_PER_PAGE
        });
        
        const response = await fetch(`/admin/users/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        if (!data.users || data.users.length === 0) {
            container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        displayUsers(data.users);
        updatePagination('users', data.total, data.offset, data.limit);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}</div>`;
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function viewUserVideos(userId) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–∏–¥–µ–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    switchTab('videos');
    setTimeout(() => {
        searchVideos(userId);
    }, 100);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(userId, userName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"?\n\n–í—Å–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/users/${userId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.deletedVideos}`, 'success');
            loadUsers();
            loadStats();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
async function loadVideos() {
    const container = document.getElementById('videos-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</div>';
    
    try {
        const response = await fetch('/admin/videos');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const videos = Array.isArray(data.videos) ? data.videos : 
                      Array.isArray(data) ? data : [];
        
        if (videos.length === 0) {
            container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        displayVideos(videos);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${error.message}</div>`;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
function displayVideos(videos) {
    const container = document.getElementById('videos-container');
    
    const table = `
        <table class="data-table">
            <thead>
                <tr>
                    <th><input type="checkbox" id="select-all-videos" onchange="toggleAllVideos(this)"></th>
                    <th>ID</th>
                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                    <th>–ê–≤—Ç–æ—Ä</th>
                    <th>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</th>
                    <th>–õ–∞–π–∫–∏</th>
                    <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
                    <th>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${videos.map(video => `
                    <tr>
                        <td><input type="checkbox" class="video-checkbox" value="${video.id}" onchange="updateBulkDeleteVideos()"></td>
                        <td>${video.id.substring(0, 8)}...</td>
                        <td>${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</td>
                        <td>${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                        <td>${video.views_count || 0}</td>
                        <td>${video.likes_count || 0}</td>
                        <td>
                            ${video.latitude && video.longitude ? 
                                `${video.latitude.toFixed(4)}, ${video.longitude.toFixed(4)}` : 
                                '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
                            }
                        </td>
                        <td>${new Date(video.created_at).toLocaleDateString('ru-RU')}</td>
                        <td>
                            <button class="btn btn-small btn-danger" onclick="deleteVideo('${video.id}', '${(video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').replace(/'/g, "\\'")}')">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = table;
}

// –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
async function searchVideos(userId = null) {
    const query = document.getElementById('videos-search')?.value || '';
    const minViews = document.getElementById('videos-min-views')?.value || '';
    const minLikes = document.getElementById('videos-min-likes')?.value || '';
    const sortBy = document.getElementById('videos-sort')?.value || 'created_at';
    const order = document.getElementById('videos-order')?.value || 'desc';
    
    const container = document.getElementById('videos-container');
    container.innerHTML = '<div class="loading">–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...</div>';
    
    try {
        const params = new URLSearchParams({
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentVideosPage * ITEMS_PER_PAGE
        });
        
        if (query) params.append('query', query);
        if (userId) params.append('userId', userId);
        if (minViews) params.append('minViews', minViews);
        if (minLikes) params.append('minLikes', minLikes);
        
        const response = await fetch(`/admin/videos/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        if (!data.videos || data.videos.length === 0) {
            container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        displayVideos(data.videos);
        updatePagination('videos', data.total, data.offset, data.limit);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}</div>`;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –≤–∏–¥–µ–æ
function toggleAllVideos(checkbox) {
    const checkboxes = document.querySelectorAll('.video-checkbox');
    checkboxes.forEach(cb => cb.checked = checkbox.checked);
    updateBulkDeleteVideos();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
function updateBulkDeleteVideos() {
    const checkboxes = document.querySelectorAll('.video-checkbox:checked');
    const btn = document.getElementById('bulk-delete-videos-btn');
    
    if (btn) {
        btn.disabled = checkboxes.length === 0;
        btn.textContent = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${checkboxes.length})`;
    }
    
    selectedVideoIds = Array.from(checkboxes).map(cb => cb.value);
}

// –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
async function bulkDeleteVideos() {
    if (selectedVideoIds.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedVideoIds.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch('/admin/videos/bulk', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ videoIds: selectedVideoIds })
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.count}`, 'success');
            loadVideos();
            loadStats();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
async function deleteVideo(videoId, description) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ "${description}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/videos/${videoId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            showNotification('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', 'success');
            loadVideos();
            loadStats();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
async function loadTags() {
    const container = document.getElementById('tags-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤...</div>';
    
    try {
        const response = await fetch('/admin/tags');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        allTags = Array.isArray(data.tags) ? data.tags : 
                 Array.isArray(data) ? data : [];
        
        if (allTags.length === 0) {
            container.innerHTML = '<div class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        allTags.sort((a, b) => (b.usage_count || 0) - (a.usage_count || 0));
        
        const table = `
            <div class="tags-actions">
                <div class="tags-filters">
                    <select id="usage-filter" onchange="filterTags()" class="filter-select">
                        <option value="">–í—Å–µ —Ç–µ–≥–∏ (${allTags.length})</option>
                        <option value="0">–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (0 —Ä–∞–∑)</option>
                        <option value="1-5">–ú–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (1-5 —Ä–∞–∑)</option>
                        <option value="6-20">–°—Ä–µ–¥–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (6-20 —Ä–∞–∑)</option>
                        <option value="21+">–ß–∞—Å—Ç–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (21+ —Ä–∞–∑)</option>
                    </select>
                    <input type="text" id="search-tags" placeholder="–ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤..." onkeyup="searchTags()" class="search-input">
                </div>
                <div class="tags-bulk-actions">
                    <button class="btn btn-secondary" onclick="selectAllTags()">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</button>
                    <button class="btn btn-secondary" onclick="deselectAllTags()">–°–Ω—è—Ç—å –≤—ã–±–æ—Ä</button>
                    <button class="btn btn-warning" onclick="fixTagCounters()" id="fix-counters-btn">
                        üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
                    </button>
                    <button class="btn btn-danger" onclick="deleteSelectedTags()" id="bulk-delete-btn" disabled>
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    </button>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all-checkbox" onchange="toggleAllTags(this)"></th>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                        <th>–°–æ–∑–¥–∞—Ç–µ–ª—å</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="tags-tbody"></tbody>
            </table>
        `;
        
        container.innerHTML = table;
        filteredTags = [...allTags];
        renderFilteredTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: ${error.message}</div>`;
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
function filterTags() {
    const usageFilter = document.getElementById('usage-filter').value;
    const searchQuery = document.getElementById('search-tags').value.toLowerCase();
    
    filteredTags = allTags.filter(tag => {
        let matchesUsage = true;
        let matchesSearch = true;
        
        if (usageFilter) {
            const usage = tag.usage_count || 0;
            switch (usageFilter) {
                case '0': matchesUsage = usage === 0; break;
                case '1-5': matchesUsage = usage >= 1 && usage <= 5; break;
                case '6-20': matchesUsage = usage >= 6 && usage <= 20; break;
                case '21+': matchesUsage = usage >= 21; break;
            }
        }
        
        if (searchQuery) {
            matchesSearch = tag.name.toLowerCase().includes(searchQuery);
        }
        
        return matchesUsage && matchesSearch;
    });
    
    renderFilteredTags();
}

function searchTags() {
    filterTags();
}

function renderFilteredTags() {
    const tbody = document.getElementById('tags-tbody');
    if (!tbody) return;
    
    if (filteredTags.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = filteredTags.map(tag => {
        const creatorName = tag.creator_name || '–°–∏—Å—Ç–µ–º–∞';
        const creatorId = tag.user_id ? tag.user_id.substring(0, 8) + '...' : '-';
        
        return `
            <tr>
                <td><input type="checkbox" class="tag-checkbox" value="${tag.id}" onchange="updateBulkDeleteButton()"></td>
                <td>${tag.id.substring(0, 8)}...</td>
                <td><span class="tag">${tag.name}</span></td>
                <td>${tag.usage_count || 0}</td>
                <td title="${creatorName} (${creatorId})">${creatorName}</td>
                <td>${new Date(tag.created_at).toLocaleDateString('ru-RU')}</td>
                <td>
                    <button class="btn btn-small btn-danger" onclick="deleteTag('${tag.id}', '${tag.name.replace(/'/g, "\\'")}', ${tag.usage_count || 0})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `;
    }).join('');
    
    updateBulkDeleteButton();
}

function selectAllTags() {
    document.querySelectorAll('.tag-checkbox').forEach(cb => cb.checked = true);
    document.getElementById('select-all-checkbox').checked = true;
    updateBulkDeleteButton();
}

function deselectAllTags() {
    document.querySelectorAll('.tag-checkbox').forEach(cb => cb.checked = false);
    document.getElementById('select-all-checkbox').checked = false;
    updateBulkDeleteButton();
}

function toggleAllTags(checkbox) {
    document.querySelectorAll('.tag-checkbox').forEach(cb => cb.checked = checkbox.checked);
    updateBulkDeleteButton();
}

function updateBulkDeleteButton() {
    const selected = document.querySelectorAll('.tag-checkbox:checked');
    const btn = document.getElementById('bulk-delete-btn');
    
    if (btn) {
        btn.disabled = selected.length === 0;
        btn.textContent = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${selected.length})`;
    }
}

async function deleteTag(tagId, tagName, usageCount) {
    let message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tagName}"?`;
    
    if (usageCount > 0) {
        message += `\n\n‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${usageCount} –≤–∏–¥–µ–æ. –í—Å–µ —Å–≤—è–∑–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`;
    }
    
    message += '\n\n‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
    
    if (!confirm(message)) return;
    
    try {
        const response = await fetch(`/admin/tags/${tagId}`, { method: 'DELETE' });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–¢–µ–≥ "${result.tagName}" —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: ${result.deletedConnections}`, 'success');
            loadTags();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', 'error');
    }
}

async function deleteSelectedTags() {
    const selected = Array.from(document.querySelectorAll('.tag-checkbox:checked')).map(cb => cb.value);
    
    if (selected.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selected.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤?\n\n‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch('/admin/tags/bulk', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tagIds: selected })
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–£–¥–∞–ª–µ–Ω–æ —Ç–µ–≥–æ–≤: ${result.successCount}`, 'success');
            loadTags();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
    }
}

async function fixTagCounters() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤—è–∑–µ–π –∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')) {
        return;
    }
    
    try {
        const btn = document.getElementById('fix-counters-btn');
        if (btn) {
            btn.disabled = true;
            btn.innerHTML = '‚è≥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...';
        }
        
        const response = await fetch('/admin/tags/fix-counters', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
            const result = await response.json();
            
            if (result.fixedCount > 0) {
                showNotification(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.fixedCount} –∏–∑ ${result.totalTags} —Ç–µ–≥–æ–≤`, 'success');
            } else {
                showNotification('–í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 'success');
            }
            
            loadTags();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤', 'error');
    } finally {
        const btn = document.getElementById('fix-counters-btn');
        if (btn) {
            btn.disabled = false;
            btn.innerHTML = 'üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function loadSystemInfo() {
    const container = document.getElementById('system-info-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</div>';
    
    try {
        const response = await fetch('/admin/system/info');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        const formatBytes = (bytes) => {
            const gb = (bytes / (1024 ** 3)).toFixed(2);
            const mb = (bytes / (1024 ** 2)).toFixed(2);
            return bytes > 1024 ** 3 ? `${gb} GB` : `${mb} MB`;
        };
        
        const formatUptime = (seconds) => {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            return `${days}–¥ ${hours}—á ${minutes}–º`;
        };
        
        container.innerHTML = `
            <div class="system-info-grid">
                <div class="info-card">
                    <h3>üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h3>
                    <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${data.os.platform}</p>
                    <p><strong>–•–æ—Å—Ç:</strong> ${data.os.hostname}</p>
                    <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${formatUptime(data.os.uptime)}</p>
                    <p><strong>Node.js:</strong> ${data.os.nodeVersion}</p>
                </div>
                
                <div class="info-card">
                    <h3>üß† –ü–∞–º—è—Ç—å</h3>
                    <p><strong>–í—Å–µ–≥–æ:</strong> ${formatBytes(data.memory.total)}</p>
                    <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</strong> ${formatBytes(data.memory.used)}</p>
                    <p><strong>–°–≤–æ–±–æ–¥–Ω–æ:</strong> ${formatBytes(data.memory.free)}</p>
                    <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> ${data.memory.usagePercent}%</p>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${data.memory.usagePercent}%"></div>
                    </div>
                </div>
                
                <div class="info-card">
                    <h3>‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</h3>
                    <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${data.cpu.model}</p>
                    <p><strong>–Ø–¥–µ—Ä:</strong> ${data.cpu.count}</p>
                </div>
                
                <div class="info-card">
                    <h3>üìä –ü—Ä–æ—Ü–µ—Å—Å Node.js</h3>
                    <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${formatUptime(data.process.uptime)}</p>
                    <p><strong>RSS:</strong> ${formatBytes(data.process.memory.rss)}</p>
                    <p><strong>Heap Total:</strong> ${formatBytes(data.process.memory.heapTotal)}</p>
                    <p><strong>Heap Used:</strong> ${formatBytes(data.process.memory.heapUsed)}</p>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
    }
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function cleanupData(type) {
    const messages = {
        'unused_tags': '—É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏',
        'old_videos': '—É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)'
    };
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${messages[type]}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch('/admin/system/cleanup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type })
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.deletedCount}`, 'success');
            loadStats();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function loadActivityLogs() {
    const container = document.getElementById('activity-logs-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>';
    
    try {
        const response = await fetch('/admin/activity-logs?limit=50');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        if (!data.logs || data.logs.length === 0) {
            container.innerHTML = '<div class="no-data">–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const logsHtml = data.logs.map(log => {
            const icon = log.type === 'video_upload' ? 'üé¨' : 'üë§';
            const typeLabel = log.type === 'video_upload' ? '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
            const date = new Date(log.timestamp).toLocaleString('ru-RU');
            
            return `
                <div class="log-item">
                    <span class="log-icon">${icon}</span>
                    <div class="log-content">
                        <div class="log-header">
                            <strong>${typeLabel}</strong>
                            <span class="log-time">${date}</span>
                        </div>
                        <div class="log-description">
                            <strong>${log.user}:</strong> ${log.description}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = `<div class="logs-list">${logsHtml}</div>`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ${error.message}</div>`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
async function exportData(type, format) {
    try {
        showNotification('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', 'info');
        
        const response = await fetch(`/admin/system/export/${type}?format=${format}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${type}_export_${Date.now()}.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
function updatePagination(type, total, offset, limit) {
    const container = document.getElementById(`${type}-pagination`);
    if (!container) return;
    
    const totalPages = Math.ceil(total / limit);
    const currentPage = Math.floor(offset / limit) + 1;
    
    if (totalPages <= 1) {
        container.innerHTML = '';
        return;
    }
    
    let html = `<div class="pagination-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages} (–≤—Å–µ–≥–æ: ${total})</div>`;
    html += '<div class="pagination-buttons">';
    
    if (currentPage > 1) {
        html += `<button class="btn btn-small" onclick="changePage('${type}', ${currentPage - 2})">‚Üê –ù–∞–∑–∞–¥</button>`;
    }
    
    if (currentPage < totalPages) {
        html += `<button class="btn btn-small" onclick="changePage('${type}', ${currentPage})">–í–ø–µ—Ä–µ–¥ ‚Üí</button>`;
    }
    
    html += '</div>';
    container.innerHTML = html;
}

function changePage(type, page) {
    if (type === 'users') {
        currentUsersPage = page;
        searchUsers();
    } else if (type === 'videos') {
        currentVideosPage = page;
        searchVideos();
    }
}

// –î–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏
function showCleanupDialog() {
    if (confirm('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n–û–ö - –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏\n–û—Ç–º–µ–Ω–∞ - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        cleanupData('unused_tags');
    } else {
        cleanupData('old_videos');
    }
}

// –í—ã—Ö–æ–¥
async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏?')) return;
    
    try {
        const response = await fetch('/admin/logout', { method: 'POST' });
        
        if (response.ok) {
            window.location.href = '/admin';
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
        animation: slideIn 0.3s ease;
    `;
    
    switch(type) {
        case 'success': notification.style.background = 'rgba(76, 175, 80, 0.9)'; break;
        case 'error': notification.style.background = 'rgba(244, 67, 54, 0.9)'; break;
        case 'warning': notification.style.background = 'rgba(255, 152, 0, 0.9)'; break;
        default: notification.style.background = 'rgba(33, 150, 243, 0.9)';
    }
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 5000);
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
async function createTag() {
    const input = document.getElementById('new-tag-name');
    const tagName = input.value.trim();
    
    if (!tagName) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞', 'warning');
        input.focus();
        return;
    }
    
    if (tagName.length > 50) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
        input.focus();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ–≥
    const existingTag = allTags.find(tag => tag.name.toLowerCase() === tagName.toLowerCase());
    if (existingTag) {
        showNotification(`–¢–µ–≥ "${tagName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'warning');
        input.focus();
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
        const response = await fetch('/admin/tags', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: tagName })
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–¢–µ–≥ "${result.tag.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`, 'success');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input.value = '';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
            loadTags();
        } else {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`, 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
document.addEventListener('DOMContentLoaded', function() {
    const tagInput = document.getElementById('new-tag-name');
    if (tagInput) {
        tagInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                createTag();
            }
        });
    }
    
    loadStats();
    loadDashboardChart();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadStats, 30000);
});
