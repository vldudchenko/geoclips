import '../views/admin.css';
// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        const response = await fetch(`${window.location.origin}/admin/stats`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
        
        document.getElementById('users-count').textContent = data.usersCount || 0;
        document.getElementById('videos-count').textContent = data.videosCount || 0;
        document.getElementById('total-views').textContent = data.totalViews || 0;
        document.getElementById('total-likes').textContent = data.totalLikes || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        document.getElementById('users-count').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('videos-count').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('total-views').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('total-likes').textContent = '–û—à–∏–±–∫–∞';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    const container = document.getElementById('users-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const response = await fetch(`${window.location.origin}/admin/users`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const users = await response.json();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users);
        
        if (users.length === 0) {
            container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const table = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ê–≤–∞—Ç–∞—Ä</th>
                        <th>–ò–º—è –§–∞–º–∏–ª–∏—è</th>
                        <th>–õ–æ–≥–∏–Ω</th>
                        <th>–í–∏–¥–µ–æ</th>
                        <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                        <th>Yandex ID</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.id}</td>
                            <td>
                                ${user.avatar_url ? 
                                    `<img src="${user.avatar_url}" class="avatar" alt="–ê–≤–∞—Ç–∞—Ä">` : 
                                    `<div class="avatar" style="background: #ddd; display: flex; align-items: center; justify-content: center;">üë§</div>`
                                }
                            </td>
                            <td>${user.first_name || ''} ${user.last_name || ''}</td>
                            <td>${user.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>
                                <span class="video-count">${user.videos_count || 0}</span>
                                <span class="video-count-label">–≤–∏–¥–µ–æ</span>
                            </td>
                            <td>${new Date(user.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>${user.yandex_id || '-'}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}</div>`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
async function loadVideos() {
    const container = document.getElementById('videos-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...');
        const response = await fetch(`${window.location.origin}/admin/videos`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const videos = await response.json();
        console.log('–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã:', videos);
        
        if (videos.length === 0) {
            container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const table = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>–ü—Ä–µ–≤—å—é</th>
                        <th>ID</th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                        <th>–ê–≤—Ç–æ—Ä</th>
                        <th>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</th>
                        <th>–õ–∞–π–∫–∏</th>
                        <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${videos.map(video => `
                        <tr>
                            <td>
                                <div class="video-preview-container">
                                    <div class="video-preview-placeholder" onclick="generateThumbnail('${video.video_url}')">
                                        <span>üìπ</span>
                                        <small>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é</small>
                                    </div>
                                </div>
                            </td>
                            <td>${video.id}</td>
                            <td>${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</td>
                            <td>${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${video.views_count || 0}</td>
                            <td>${video.likes_count || 0}</td>
                            <td>${video.latitude && video.longitude ? 
                                `${video.latitude.toFixed(4)}, ${video.longitude.toFixed(4)}` : 
                                '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
                            }</td>
                            <td>${new Date(video.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-danger" onclick="deleteVideo('${video.id}', '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}')">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${error.message}</div>`;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
async function deleteVideo(videoId, description) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ "${description}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch(`${window.location.origin}/admin/videos/${videoId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            alert('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
            loadVideos(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            const error = await response.json();
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.error}`);
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
async function loadTags() {
    const container = document.getElementById('tags-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏...');
        const response = await fetch(`${window.location.origin}/admin/tags`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        allTags = await response.json();
        console.log('–¢–µ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', allTags);
        
        if (allTags.length === 0) {
            container.innerHTML = '<div class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
        allTags.sort((a, b) => (b.usage_count || 0) - (a.usage_count || 0));
        
        const table = `
            <div class="tags-actions">
                <div class="tags-filters">
                    <select id="usage-filter" onchange="filterTags()" class="filter-select">
                        <option value="">–í—Å–µ —Ç–µ–≥–∏ (${allTags.length})</option>
                        <option value="0">–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (0 —Ä–∞–∑)</option>
                        <option value="1-5">–ú–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (1-5 —Ä–∞–∑)</option>
                        <option value="6-20">–°—Ä–µ–¥–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (6-20 —Ä–∞–∑)</option>
                        <option value="21+">–ß–∞—Å—Ç–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (21+ —Ä–∞–∑)</option>
                    </select>
                    <input type="text" id="search-tags" placeholder="–ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤..." onkeyup="searchTags()" class="search-input">
                </div>
                <div class="tags-bulk-actions">
                    <button class="btn btn-secondary" onclick="selectAllTags()">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</button>
                    <button class="btn btn-secondary" onclick="deselectAllTags()">–°–Ω—è—Ç—å –≤—ã–±–æ—Ä</button>
                    <button class="btn btn-warning" onclick="fixTagCounters()" id="fix-counters-btn">
                        üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
                    </button>
                    <button class="btn btn-danger" onclick="deleteSelectedTags()" id="bulk-delete-btn" disabled>
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    </button>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>
                            <input type="checkbox" id="select-all-checkbox" onchange="toggleAllTags(this)">
                        </th>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ renderFilteredTags() -->
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        filteredTags = [...allTags];
        renderFilteredTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: ${error.message}</div>`;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
async function deleteTag(tagId, tagName, usageCount) {
    let message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tagName}"?`;
    
    if (usageCount > 0) {
        message += `\n\n‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${usageCount} –≤–∏–¥–µ–æ. –í—Å–µ —Å–≤—è–∑–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`;
    }
    
    message += '\n\n‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const deleteButton = document.querySelector(`button[onclick*="${tagId}"]`);
        if (deleteButton) {
            deleteButton.disabled = true;
            deleteButton.innerHTML = '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...';
        }
        
        const response = await fetch(`${window.location.origin}/admin/tags/${tagId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`‚úÖ –¢–µ–≥ "${result.tagName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: ${result.deletedConnections}`, 'success');
            loadTags(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            const error = await response.json();
            showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ${error.error}`, 'error');
        }
    } catch (error) {
        showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`, 'error');
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
let allTags = [];
let filteredTags = [];

// –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
function filterTags() {
    const usageFilter = document.getElementById('usage-filter').value;
    const searchQuery = document.getElementById('search-tags').value.toLowerCase();
    
    filteredTags = allTags.filter(tag => {
        let matchesUsage = true;
        let matchesSearch = true;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        if (usageFilter) {
            const usage = tag.usage_count || 0;
            switch (usageFilter) {
                case '0':
                    matchesUsage = usage === 0;
                    break;
                case '1-5':
                    matchesUsage = usage >= 1 && usage <= 5;
                    break;
                case '6-20':
                    matchesUsage = usage >= 6 && usage <= 20;
                    break;
                case '21+':
                    matchesUsage = usage >= 21;
                    break;
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if (searchQuery) {
            matchesSearch = tag.name.toLowerCase().includes(searchQuery);
        }
        
        return matchesUsage && matchesSearch;
    });
    
    renderFilteredTags();
}

function searchTags() {
    filterTags(); // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
}

function renderFilteredTags() {
    const tbody = document.querySelector('#tags-container table tbody');
    if (!tbody) return;
    
    if (filteredTags.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = filteredTags.map(tag => `
        <tr>
            <td>
                <input type="checkbox" class="tag-checkbox" value="${tag.id}" onchange="updateBulkDeleteButton()">
            </td>
            <td>${tag.id}</td>
            <td><span class="tag">${tag.name}</span></td>
            <td>${tag.usage_count}</td>
            <td>${new Date(tag.created_at).toLocaleDateString('ru-RU')}</td>
            <td>
                <button class="btn btn-danger" onclick="deleteTag('${tag.id}', '${tag.name.replace(/'/g, "\\'")}', ${tag.usage_count})">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </td>
        </tr>
    `).join('');
    
    updateBulkDeleteButton();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
function selectAllTags() {
    const checkboxes = document.querySelectorAll('.tag-checkbox');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    selectAllCheckbox.checked = true;
    updateBulkDeleteButton();
}

function deselectAllTags() {
    const checkboxes = document.querySelectorAll('.tag-checkbox');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    selectAllCheckbox.checked = false;
    updateBulkDeleteButton();
}

function toggleAllTags(selectAllCheckbox) {
    const checkboxes = document.querySelectorAll('.tag-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
    });
    updateBulkDeleteButton();
}

function updateBulkDeleteButton() {
    const selectedCheckboxes = document.querySelectorAll('.tag-checkbox:checked');
    const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
    
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = selectedCheckboxes.length === 0;
        bulkDeleteBtn.textContent = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${selectedCheckboxes.length})`;
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤
async function fixTagCounters() {
    const message = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤—è–∑–µ–π –∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.';
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const fixBtn = document.getElementById('fix-counters-btn');
        if (fixBtn) {
            fixBtn.disabled = true;
            fixBtn.innerHTML = '‚è≥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...';
        }
        
        const response = await fetch(`${window.location.origin}/admin/tags/fix-counters`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            
            if (result.fixedCount > 0) {
                showNotification(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.fixedCount} –∏–∑ ${result.totalTags} —Ç–µ–≥–æ–≤`, 'success');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
                if (result.results && result.results.length > 0) {
                    console.log('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏:', result.results);
                }
            } else {
                showNotification('‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 'success');
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
            loadTags();
        } else {
            const error = await response.json();
            showNotification(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: ${error.error}`, 'error');
        }
        
    } catch (error) {
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: ${error.message}`, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const fixBtn = document.getElementById('fix-counters-btn');
        if (fixBtn) {
            fixBtn.disabled = false;
            fixBtn.innerHTML = 'üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏';
        }
    }
}

async function deleteSelectedTags() {
    const selectedCheckboxes = document.querySelectorAll('.tag-checkbox:checked');
    const selectedTagIds = Array.from(selectedCheckboxes).map(cb => cb.value);
    
    if (selectedTagIds.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    const message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedTagIds.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤?\n\n‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`;
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
        if (bulkDeleteBtn) {
            bulkDeleteBtn.disabled = true;
            bulkDeleteBtn.innerHTML = '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...';
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        const response = await fetch(`${window.location.origin}/admin/tags/bulk`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ tagIds: selectedTagIds })
        });
        
        if (response.ok) {
            const result = await response.json();
            
            if (result.successCount > 0) {
                showNotification(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${result.successCount} –∏–∑ ${result.total} —Ç–µ–≥–æ–≤`, 'success');
            }
            
            if (result.errorCount > 0) {
                showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${result.errorCount} —Ç–µ–≥–æ–≤`, 'error');
                if (result.errors && result.errors.length > 0) {
                    console.error('–û—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:', result.errors);
                }
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
            loadTags();
        } else {
            const error = await response.json();
            showNotification(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: ${error.error}`, 'error');
        }
        
    } catch (error) {
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
        if (bulkDeleteBtn) {
            bulkDeleteBtn.disabled = false;
            updateBulkDeleteButton();
        }
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏?')) {
        return;
    }
    
    try {
        const response = await fetch(`${window.location.origin}/admin/logout`, {
            method: 'POST'
        });
        
        if (response.ok) {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = '/admin';
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${error.message}`);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
async function generateThumbnail(videoUrl) {
    if (!videoUrl) {
        showNotification('URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    try {
        showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é...', 'info');
        
        const response = await fetch(`${window.location.origin}/admin/generate-thumbnail`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ videoUrl })
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification('–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'success');
            loadVideos(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
        } else {
            const error = await response.json();
            showNotification(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: ${error.error}`, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
        animation: slideIn 0.3s ease;
    `;
    
    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch(type) {
        case 'success':
            notification.style.background = 'rgba(76, 175, 80, 0.9)';
            break;
        case 'error':
            notification.style.background = 'rgba(244, 67, 54, 0.9)';
            break;
        case 'warning':
            notification.style.background = 'rgba(255, 152, 0, 0.9)';
            break;
        default:
            notification.style.background = 'rgba(33, 150, 243, 0.9)';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 5000);
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadStats();
    loadUsers();
    loadVideos();
    loadTags();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadStats, 30000);
});

