// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        const response = await fetch('/admin/stats');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
        
        document.getElementById('users-count').textContent = data.usersCount || 0;
        document.getElementById('videos-count').textContent = data.videosCount || 0;
        document.getElementById('total-views').textContent = data.totalViews || 0;
        document.getElementById('total-likes').textContent = data.totalLikes || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        document.getElementById('users-count').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('videos-count').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('total-views').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('total-likes').textContent = '–û—à–∏–±–∫–∞';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    const container = document.getElementById('users-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const response = await fetch('/admin/users');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const users = await response.json();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users);
        
        if (users.length === 0) {
            container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const table = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ê–≤–∞—Ç–∞—Ä</th>
                        <th>–ò–º—è –§–∞–º–∏–ª–∏—è</th>
                        <th>–õ–æ–≥–∏–Ω</th>
                        <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                        <th>Yandex ID</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.id}</td>
                            <td>
                                ${user.avatar_url ? 
                                    `<img src="${user.avatar_url}" class="avatar" alt="–ê–≤–∞—Ç–∞—Ä">` : 
                                    `<div class="avatar" style="background: #ddd; display: flex; align-items: center; justify-content: center;">üë§</div>`
                                }
                            </td>
                            <td>${user.first_name || ''} ${user.last_name || ''}</td>
                            <td>${user.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${new Date(user.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>${user.yandex_id || '-'}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}</div>`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
async function loadVideos() {
    const container = document.getElementById('videos-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...');
        const response = await fetch('/admin/videos');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const videos = await response.json();
        console.log('–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã:', videos);
        
        if (videos.length === 0) {
            container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const table = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                        <th>–ê–≤—Ç–æ—Ä</th>
                        <th>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</th>
                        <th>–õ–∞–π–∫–∏</th>
                        <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${videos.map(video => `
                        <tr>
                            <td>${video.id}</td>
                            <td>${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</td>
                            <td>${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${video.views_count || 0}</td>
                            <td>${video.likes_count || 0}</td>
                            <td>${video.latitude && video.longitude ? 
                                `${video.latitude.toFixed(4)}, ${video.longitude.toFixed(4)}` : 
                                '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
                            }</td>
                            <td>${new Date(video.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-danger" onclick="deleteVideo(${video.id}, '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}')">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${error.message}</div>`;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
async function deleteVideo(videoId, description) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ "${description}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/videos/${videoId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            alert('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
            loadVideos(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            const error = await response.json();
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.error}`);
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
async function loadTags() {
    const container = document.getElementById('tags-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤...</div>';
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏...');
        const response = await fetch('/admin/tags');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const tags = await response.json();
        console.log('–¢–µ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', tags);
        
        if (tags.length === 0) {
            container.innerHTML = '<div class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const table = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${tags.map(tag => `
                        <tr>
                            <td>${tag.id}</td>
                            <td>${tag.name}</td>
                            <td>${tag.usage_count}</td>
                            <td>${new Date(tag.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-danger" onclick="deleteTag(${tag.id}, '${tag.name}', ${tag.usage_count})">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        container.innerHTML = table;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: ${error.message}</div>`;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
async function deleteTag(tagId, tagName, usageCount) {
    let message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tagName}"?`;
    
    if (usageCount > 0) {
        message += `\n\n–≠—Ç–æ—Ç —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${usageCount} –≤–∏–¥–µ–æ. –í—Å–µ —Å–≤—è–∑–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`;
    }
    
    message += '\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/tags/${tagId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            alert('–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            loadTags(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            const error = await response.json();
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ${error.error}`);
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`);
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏?')) {
        return;
    }
    
    try {
        const response = await fetch('/admin/logout', {
            method: 'POST'
        });
        
        if (response.ok) {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = '/admin';
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${error.message}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadStats();
    loadUsers();
    loadVideos();
    loadTags();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadStats, 30000);
});

