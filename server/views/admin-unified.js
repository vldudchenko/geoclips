/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GeoClips
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
let allTags = [];
let filteredTags = [];
let selectedVideoIds = [];
let currentUsersPage = 0;
let currentVideosPage = 0;
const ITEMS_PER_PAGE = 20;

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
 */
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const selectedTab = document.getElementById(`tab-${tabName}`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    switch(tabName) {
        case 'users':
            loadUsers();
            break;
        case 'videos':
            loadVideos();
            break;
        case 'tags':
            loadTags();
            break;
        case 'comments':
            loadComments();
            break;

    }
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
 */
async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏?')) return;
    
    try {
        const response = await fetch('/admin/logout', { method: 'POST', credentials: 'include' });
        
        if (response.ok) {
            window.location.href = '/admin';
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
    }
}

// ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –î–ê–ù–ù–´–ú ====================

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
 */
function handleDisabledClick(message) {
    showNotification(message, 'warning');
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function navigateToUserProfile(userId, userName) {
    console.log('üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userName });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    switchTab('users');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
    setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('users-search');
        if (searchInput) {
            searchInput.value = '';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–≥–æ
        loadUsers().then(() => {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const usersContainer = document.querySelector('.users-table-container');
            if (usersContainer) {
                usersContainer.classList.add('blur-mode');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–º—ã—Ç–∏—è
                const disableBlurHandler = (e) => {
                    if (e.target.closest('tr')) {
                        usersContainer.classList.remove('blur-mode');
                        usersContainer.removeEventListener('click', disableBlurHandler);
                    }
                };
                usersContainer.addEventListener('click', disableBlurHandler);
            }
            
            // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRow = document.getElementById(`user-row-${userId}`);
            if (userRow) {
                userRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
                userRow.classList.add('highlighted');
                
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–º—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    userRow.classList.remove('highlighted');
                    if (usersContainer) {
                        usersContainer.classList.remove('blur-mode');
                    }
                }, 4000);
            }
        });
    }, 100);
    
    showNotification(`–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`, 'info');
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function navigateToUserVideos(userId, userName) {
    console.log('üé¨ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userName });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–∏–¥–µ–æ
    switchTab('videos');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('videos-search');
        if (searchInput) {
            searchInput.value = '';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loadUserVideos(userId, userName);
    }, 100);
    
    showNotification(`–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`, 'info');
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserVideos(userId, userName) {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
        
        const params = new URLSearchParams({
            userId: userId,
            sortBy: 'created_at',
            order: 'desc',
            limit: ITEMS_PER_PAGE,
            offset: 0
        });
        
        const response = await fetch(`/admin/videos/admin/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        const videosContainer = document.getElementById('videos-container');
        if (videosContainer) {
            const existingHeader = videosContainer.querySelector('.filter-header');
            if (existingHeader) {
                existingHeader.remove();
            }
            
            const filterHeader = document.createElement('div');
            filterHeader.className = 'filter-header';
            filterHeader.innerHTML = `
                <div class="filter-info">
                    <span class="filter-label">–§–∏–ª—å—Ç—Ä:</span>
                    <span class="filter-value">–í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"</span>
                    <button class="btn btn-secondary btn-small" onclick="clearVideoFilter()">–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</button>
                </div>
            `;
            videosContainer.insertBefore(filterHeader, videosContainer.firstChild);
        }
        
        displayVideos(data.data);
        
        showNotification(`–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${data.data?.length || 0}`, 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–∏–¥–µ–æ
 */
function clearVideoFilter() {
    const videosContainer = document.getElementById('videos-container');
    if (videosContainer) {
        const filterHeader = videosContainer.querySelector('.filter-header');
        if (filterHeader) {
            filterHeader.remove();
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    loadVideos();
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function navigateToUserComments(userId, userName, type = 'written') {
    console.log('üí¨ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userName, type });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    showCommentsModal(userId, userName, type);
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∞–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function navigateToUserLikes(userId, userName, type = 'given') {
    console.log('‚ù§Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∞–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userName, type });
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ª–∞–π–∫–∞–º–∏
    showLikesModal(userId, userName, type);
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function navigateToUserTags(userId, userName, type = 'created') {
    console.log('üè∑Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userName, type });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–µ–≥–æ–≤
    switchTab('tags');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('tags-search');
        if (searchInput) {
            searchInput.value = '';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loadUserTags(userId, userName, type);
    }, 100);
    
    showNotification(`–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`, 'info');
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserTags(userId, userName, type) {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
        
        const params = new URLSearchParams({
            userId: userId,
            sortBy: 'name',
            order: 'asc'
        });
        
        const response = await fetch(`/admin/tags?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let filteredTags = data.tags || [];
        if (type === 'created') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            filteredTags = filteredTags.filter(tag => tag.user_id === userId);
        } else if (type === 'used') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const videosResponse = await fetch(`/admin/videos/admin/search?userId=${userId}&limit=1000`, { credentials: 'include' });
                if (videosResponse.ok) {
                    const videosData = await videosResponse.json();
                    const videoIds = videosData.data?.map(video => video.id) || [];
                    
                    if (videoIds.length > 0) {
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const usedTagsResponse = await fetch(`/admin/tags`, { credentials: 'include' });
                        if (usedTagsResponse.ok) {
                            const allTagsData = await usedTagsResponse.json();
                            const allTags = allTagsData.tags || [];
                            
                            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–µ–≥–æ–º –∏ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            // –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            filteredTags = allTags.filter(tag => tag.user_id === userId);
                        }
                    } else {
                        filteredTags = [];
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                filteredTags = filteredTags.filter(tag => tag.user_id === userId);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        const tagsContainer = document.getElementById('tags-container');
        if (tagsContainer) {
            const existingHeader = tagsContainer.querySelector('.filter-header');
            if (existingHeader) {
                existingHeader.remove();
            }
            
            const filterHeader = document.createElement('div');
            filterHeader.className = 'filter-header';
            const typeText = type === 'created' ? '—Å–æ–∑–¥–∞–Ω–Ω—ã–µ' : '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ';
            filterHeader.innerHTML = `
                <div class="filter-info">
                    <span class="filter-label">–§–∏–ª—å—Ç—Ä:</span>
                    <span class="filter-value">${typeText} —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"</span>
                    <button class="btn btn-secondary btn-small" onclick="clearTagsFilter()">–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</button>
                </div>
            `;
            tagsContainer.insertBefore(filterHeader, tagsContainer.firstChild);
        }
        
        displayTags(filteredTags);
        
        showNotification(`–ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: ${filteredTags.length}`, 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–µ–≥–æ–≤
 */
function clearTagsFilter() {
    const tagsContainer = document.getElementById('tags-container');
    if (tagsContainer) {
        const filterHeader = tagsContainer.querySelector('.filter-header');
        if (filterHeader) {
            filterHeader.remove();
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
    loadTags();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
 */
function showCommentsModal(userId, userName, type) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}</h3>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</div>
            </div>
        </div>
    `;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
    
    document.body.appendChild(modal);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    loadUserComments(userId, type, modal.querySelector('.modal-body'));
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ª–∞–π–∫–∞–º–∏
 */
function showLikesModal(userId, userName, type) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–õ–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}</h3>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∞–π–∫–æ–≤...</div>
            </div>
        </div>
    `;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
    
    document.body.appendChild(modal);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–π–∫–∏
    loadUserLikes(userId, type, modal.querySelector('.modal-body'));
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function closeModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserComments(userId, type, container) {
    try {
        const endpoint = type === 'written' ? '/admin/comments/user' : '/admin/comments/received';
        const response = await fetch(`${endpoint}/${userId}`);
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        if (data.comments && data.comments.length > 0) {
            container.innerHTML = `
                <div class="comments-list">
                    ${data.comments.map(comment => `
                        <div class="comment-item">
                            <div class="comment-text">${comment.text}</div>
                            <div class="comment-meta">
                                <span>–í–∏–¥–µ–æ: ${comment.video_description || 'ID: ' + comment.video_id}</span>
                                <span>–î–∞—Ç–∞: ${new Date(comment.created_at).toLocaleString()}</span>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } else {
            container.innerHTML = '<div class="no-data">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>';
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserLikes(userId, type, container) {
    try {
        const endpoint = type === 'given' ? '/admin/likes/given' : '/admin/likes/received';
        const response = await fetch(`${endpoint}/${userId}`);
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–∞–π–∫–æ–≤:', data);
        if (data.likes && data.likes.length > 0) {
            console.log('üë§ –ü–µ—Ä–≤—ã–π –ª–∞–π–∫:', data.likes[0]);
        }
        
        if (data.likes && data.likes.length > 0) {
            container.innerHTML = `
                <div class="likes-list">
                    ${data.likes.map(like => `
                        <div class="like-item">
                            ${type === 'given' ? `
                                <div class="like-video">–í–∏–¥–µ–æ: ${like.video_description || 'ID: ' + like.video_id}</div>
                                <div class="like-meta">
                                    <span>–î–∞—Ç–∞: ${new Date(like.created_at).toLocaleString()}</span>
                                </div>
                            ` : `
                                <div class="like-header">
                                    <div class="like-user">
                                        ${like.user_avatar ? 
                                            `<img src="${like.user_avatar}" alt="${like.user_name}" class="user-avatar-small">` : 
                                            `<div class="user-avatar-placeholder">${(like.user_name || 'U').charAt(0).toUpperCase()}</div>`
                                        }
                                        <span class="user-name">${like.user_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                                    </div>
                                    <div class="like-date">${new Date(like.created_at).toLocaleString()}</div>
                                </div>
                                <div class="like-video">–í–∏–¥–µ–æ: ${like.video_description || 'ID: ' + like.video_id}</div>
                            `}
                        </div>
                    `).join('')}
                </div>
            `;
        } else {
            container.innerHTML = '<div class="no-data">–õ–∞–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤:', error);
        container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤</div>';
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function loadUsers() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'info');
        
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const response = await fetch('/admin/users');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
        
        if (data.users && data.users.length > 0) {
            console.log('üë§ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.users[0]);
            console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                videosCount: data.users[0].videosCount,
                commentsWritten: data.users[0].commentsWritten,
                likesGiven: data.users[0].likesGiven,
                tagsCreated: data.users[0].tagsCreated
            });
        }
        
        displayUsers(data.users);
        
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function displayUsers(users) {
    const container = document.getElementById('users-container');
    
    console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users?.length || 0);
    
    if (!users || users.length === 0) {
        container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    if (users.length > 0) {
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
            id: users[0].id,
            display_name: users[0].display_name,
            videosCount: users[0].videosCount,
            commentsWritten: users[0].commentsWritten,
            likesGiven: users[0].likesGiven,
            tagsCreated: users[0].tagsCreated
        });
    }
    
    container.innerHTML = `
        <div class="users-table-container">
        <table class="users-table">
            <thead>
                <tr>
                        <th title="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">–ê–≤–∞—Ç–∞—Ä</th>
                        <th title="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">–õ–æ–≥–∏–Ω</th>
                        <th title="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä">ID</th>
                        <th title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ">–í–∏–¥–µ–æ</th>
                        <th title="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏">–î–∞—Ç–∞</th>
                        <th title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º">–ö–æ–º–º. —Å–æ–∑–¥.</th>
                        <th title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">–ö–æ–º–º. –ø–æ–ª.</th>
                        <th title="–õ–∞–π–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º">–õ–∞–π–∫–∏ —Å–æ–∑–¥.</th>
                        <th title="–õ–∞–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">–õ–∞–π–∫–∏ –ø–æ–ª.</th>
                        <th title="–¢–µ–≥–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º">–¢–µ–≥–∏ —Å–æ–∑–¥.</th>
                        <th title="–¢–µ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">–¢–µ–≥–∏ –∏—Å–ø.</th>
                        <th title="–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${users.map(user => `
                    <tr id="user-row-${user.id}">
                        <td class="user-avatar-cell">
                            <div class="user-avatar">
                                ${user.avatar_url ? `<img src="${user.avatar_url}" alt="Avatar">` : 'üë§'}
                            </div>
                        </td>
                        <td>
                            <div class="user-name">${user.display_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
                            <div class="user-id">Yandex: ${user.yandex_id}</div>
                        </td>
                        <td>
                            <div class="user-id">${user.id}</div>
                        </td>
                            <td class="user-stats ${(user.videosCount || 0) === 0 ? 'disabled' : ''}" ${(user.videosCount || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')"` : `onclick="navigateToUserVideos('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}')"`} title="${(user.videosCount || 0) === 0 ? '–ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}">${user.videosCount || 0}</td>
                        <td class="user-date">${new Date(user.created_at).toLocaleDateString()}</td>
                            <td class="user-stats user-stats-comments-written ${(user.commentsWritten || 0) === 0 ? 'disabled' : ''}" ${(user.commentsWritten || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')"` : `onclick="navigateToUserComments('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'written')"`} title="${(user.commentsWritten || 0) === 0 ? '–ù–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'}">${user.commentsWritten || 0}</td>
                            <td class="user-stats user-stats-comments-received ${(user.commentsReceived || 0) === 0 ? 'disabled' : ''}" ${(user.commentsReceived || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')"` : `onclick="navigateToUserComments('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'received')"`} title="${(user.commentsReceived || 0) === 0 ? '–ù–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'}">${user.commentsReceived || 0}</td>
                            <td class="user-stats user-stats-likes-given ${(user.likesGiven || 0) === 0 ? 'disabled' : ''}" ${(user.likesGiven || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤')"` : `onclick="navigateToUserLikes('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'given')"`} title="${(user.likesGiven || 0) === 0 ? '–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏'}">${user.likesGiven || 0}</td>
                            <td class="user-stats user-stats-likes-received ${(user.likesReceived || 0) === 0 ? 'disabled' : ''}" ${(user.likesReceived || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤')"` : `onclick="navigateToUserLikes('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'received')"`} title="${(user.likesReceived || 0) === 0 ? '–ù–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏'}">${user.likesReceived || 0}</td>
                            <td class="user-stats user-stats-tags-created ${(user.tagsCreated || 0) === 0 ? 'disabled' : ''}" ${(user.tagsCreated || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤')"` : `onclick="navigateToUserTags('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'created')"`} title="${(user.tagsCreated || 0) === 0 ? '–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏'}">${user.tagsCreated || 0}</td>
                            <td class="user-stats user-stats-tags-used ${(user.tagsUsed || 0) === 0 ? 'disabled' : ''}" ${(user.tagsUsed || 0) === 0 ? `onclick="handleDisabledClick('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤')"` : `onclick="navigateToUserTags('${user.id}', '${user.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}', 'used')"`} title="${(user.tagsUsed || 0) === 0 ? '–ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤' : '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏'}">${user.tagsUsed || 0}</td>
                        <td class="user-actions-cell">
                            <button class="btn btn-danger btn-small" onclick="deleteUser('${user.id}', '${user.display_name}')">
                                üóëÔ∏è
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        </div>
    `;
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function searchUsers() {
    const query = document.getElementById('users-search').value;
    const sortBy = document.getElementById('users-sort').value;
    const order = document.getElementById('users-order').value;
    
    try {
        showNotification('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'info');
        
        const params = new URLSearchParams({
            query: query || '',
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentUsersPage * ITEMS_PER_PAGE
        });
        
        const response = await fetch(`/admin/users/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayUsers(data.data);
        
        showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function deleteUser(userId, userName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
        
        const response = await fetch(`/admin/users/${userId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.deletedVideos}`, 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadUsers();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

// ==================== –í–ò–î–ï–û ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
 */
async function loadVideos() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...', 'info');
        
        const params = new URLSearchParams({
            query: '',
            minViews: '',
            minLikes: '',
            sortBy: 'created_at',
            order: 'desc',
            limit: ITEMS_PER_PAGE,
            offset: 0
        });
        
        const response = await fetch(`/admin/videos/admin/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayVideos(data.data);
        
        showNotification('–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
function displayVideos(videos) {
    const container = document.getElementById('videos-container');
    
    if (!videos || videos.length === 0) {
        container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="videos-table">
            <thead>
                <tr>
                    <th></th>
                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                    <th>–ê–≤—Ç–æ—Ä</th>
                    <th>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</th>
                    <th>–õ–∞–π–∫–∏</th>
                    <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
                    <th>–¢–µ–≥–∏</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${videos.map(video => `
                    <tr id="video-row-${video.id}">
                        <td class="video-checkbox-cell">
                            <input type="checkbox" value="${video.id}" onchange="toggleVideoSelection('${video.id}')">
                        </td>
                        <td>
                            <div class="video-description">${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
                        </td>
                        <td>
                            <div class="video-author clickable" onclick="navigateToUserProfile('${video.users?.id || ''}', '${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}')" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                                ${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </div>
                        </td>
                        <td class="video-stats video-views ${(video.views_count || 0) === 0 ? 'disabled' : ''}" ${(video.views_count || 0) === 0 ? `onclick="handleDisabledClick('–£ –≤–∏–¥–µ–æ –Ω–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')"` : `onclick="showVideoViews('${video.id}', '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}')"`} title="${(video.views_count || 0) === 0 ? '–ù–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∏–¥–µ–æ'}">${video.views_count || 0}</td>
                        <td class="video-stats video-likes ${(video.likes_count || 0) === 0 ? 'disabled' : ''}" ${(video.likes_count || 0) === 0 ? `onclick="handleDisabledClick('–£ –≤–∏–¥–µ–æ –Ω–µ—Ç –ª–∞–π–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')"` : `onclick="showVideoLikes('${video.id}', '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}')"`} title="${(video.likes_count || 0) === 0 ? '–ù–µ—Ç –ª–∞–π–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–ü–æ–∫–∞–∑–∞—Ç—å –ª–∞–π–∫–∏ –≤–∏–¥–µ–æ'}">${video.likes_count || 0}</td>
                        <td class="video-stats video-comments ${(video.comments_count || 0) === 0 ? 'disabled' : ''}" ${(video.comments_count || 0) === 0 ? `onclick="handleDisabledClick('–£ –≤–∏–¥–µ–æ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')"` : `onclick="showVideoComments('${video.id}', '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}')"`} title="${(video.comments_count || 0) === 0 ? '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–µ–æ'}">${video.comments_count || 0}</td>
                        <td class="video-date">${new Date(video.created_at).toLocaleDateString()}</td>
                        <td class="video-coords">
                            ${video.latitude && video.longitude ? 
                                `${video.latitude.toFixed(4)}, ${video.longitude.toFixed(4)}` : 
                                '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                            }
                        </td>
                        <td class="video-tags-cell" onclick="openTagsModal('${video.id}', '${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}', '${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}')">
                            <div class="video-tags" id="video-tags-${video.id}" >
                                <div class="loading-tags">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                            </div>
                        </td>
                        <td class="video-actions-cell">
                            <button class="btn btn-danger btn-small" onclick="deleteVideo('${video.id}')">
                                üóëÔ∏è
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    videos.forEach(video => {
        loadVideoTags(video.id);
    });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
 */
async function loadVideoTags(videoId) {
    try {
        const response = await fetch(`/admin/videos/${videoId}/tags`, { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        const tags = data.tags || [];
        
        const tagsContainer = document.getElementById(`video-tags-${videoId}`);
        if (tagsContainer) {
            if (tags.length === 0) {
                tagsContainer.innerHTML = '<span class="no-tags">–ù–µ—Ç —Ç–µ–≥–æ–≤</span>';
            } else {
                tagsContainer.innerHTML = tags.map(tag => 
                    `<span class="video-tag" title="–°–æ–∑–¥–∞—Ç–µ–ª—å: ${tag.creator_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, –ü—Ä–∏—Å–≤–æ–∏–ª: ${tag.assigned_by_name || '–°–∏—Å—Ç–µ–º–∞'}">${tag.name}</span>`
                ).join('');
            }
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ ${videoId}:`, error);
        const tagsContainer = document.getElementById(`video-tags-${videoId}`);
        if (tagsContainer) {
            tagsContainer.innerHTML = '<span class="error-tags">–û—à–∏–±–∫–∞</span>';
        }
    }
}

/**
 * –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
 */
async function searchVideos() {
    const query = document.getElementById('videos-search').value;
    const minViews = document.getElementById('videos-min-views').value;
    const minLikes = document.getElementById('videos-min-likes').value;
    const sortBy = document.getElementById('videos-sort').value;
    const order = document.getElementById('videos-order').value;
    
    try {
        showNotification('–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...', 'info');
        
        const params = new URLSearchParams({
            query: query || '',
            minViews: minViews || '',
            minLikes: minLikes || '',
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentVideosPage * ITEMS_PER_PAGE
        });
        
        const response = await fetch(`/admin/videos/admin/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayVideos(data.data);
        
        showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
async function deleteVideo(videoId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...', 'info');
        
        const response = await fetch(`/admin/videos/${videoId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification('–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadVideos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ
 */
function toggleVideoSelection(videoId) {
    const index = selectedVideoIds.indexOf(videoId);
    if (index > -1) {
        selectedVideoIds.splice(index, 1);
    } else {
        selectedVideoIds.push(videoId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const videoRow = document.getElementById(`video-row-${videoId}`);
    if (videoRow) {
        videoRow.classList.toggle('selected', selectedVideoIds.includes(videoId));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-videos-btn');
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = selectedVideoIds.length === 0;
    }
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
async function bulkDeleteVideos() {
    if (selectedVideoIds.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedVideoIds.length} –≤–∏–¥–µ–æ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...', 'info');
        
        const response = await fetch('/admin/videos/bulk', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ videoIds: selectedVideoIds })
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.count}`, 'success');
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        selectedVideoIds = [];
        loadVideos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
    }
}

// ==================== –¢–ï–ì–ò ====================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–≥–æ–≤
let selectedTagIds = [];

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
 */
function toggleTagSelection(tagId) {
    const index = selectedTagIds.indexOf(tagId);
    if (index > -1) {
        selectedTagIds.splice(index, 1);
    } else {
        selectedTagIds.push(tagId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const tagRow = document.getElementById(`tag-row-${tagId}`);
    if (tagRow) {
        tagRow.classList.toggle('selected', selectedTagIds.includes(tagId));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-tags-btn');
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = selectedTagIds.length === 0;
    }
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
 */
async function bulkDeleteTags() {
    if (selectedTagIds.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedTagIds.length} —Ç–µ–≥–æ–≤?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤...', 'info');
        
        const response = await fetch('/admin/tags/bulk', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ tagIds: selectedTagIds })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Ç–µ–≥–æ–≤`, 'success');
            selectedTagIds = [];
            await loadTags(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: ${error.message}`, 'error');
    }
}

/**
 * –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
 */
function clearTagSelection() {
    selectedTagIds = [];
    
    // –°–Ω–∏–º–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    const selectedRows = document.querySelectorAll('.tags-table tbody tr.selected');
    selectedRows.forEach(row => row.classList.remove('selected'));
    
    // –°–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫–∏ —Å–æ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    const checkboxes = document.querySelectorAll('.tags-table tbody input[type="checkbox"]');
    checkboxes.forEach(checkbox => checkbox.checked = false);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-tags-btn');
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = true;
    }
    
    showNotification('–í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω', 'info');
}

/**
 * –í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
 */
function selectAllTags() {
    const checkboxes = document.querySelectorAll('.tags-table tbody input[type="checkbox"]');
    const allTagIds = Array.from(checkboxes).map(checkbox => checkbox.value);
    
    selectedTagIds = [...allTagIds];
    
    // –°—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫–∏ –Ω–∞ –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
    checkboxes.forEach(checkbox => checkbox.checked = true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
    const rows = document.querySelectorAll('.tags-table tbody tr');
    rows.forEach(row => row.classList.add('selected'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-tags-btn');
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = false;
    }
    
    showNotification(`–í—ã–±—Ä–∞–Ω–æ ${selectedTagIds.length} —Ç–µ–≥–æ–≤`, 'info');
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
 */
function toggleAllTags(headerCheckbox) {
    const checkboxes = document.querySelectorAll('.tags-table tbody input[type="checkbox"]');
    const isChecked = headerCheckbox.checked;
    
    if (isChecked) {
        // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
        selectedTagIds = Array.from(checkboxes).map(checkbox => checkbox.value);
        checkboxes.forEach(checkbox => checkbox.checked = true);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
        const rows = document.querySelectorAll('.tags-table tbody tr');
        rows.forEach(row => row.classList.add('selected'));
        
        showNotification(`–í—ã–±—Ä–∞–Ω–æ ${selectedTagIds.length} —Ç–µ–≥–æ–≤`, 'info');
    } else {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        selectedTagIds = [];
        checkboxes.forEach(checkbox => checkbox.checked = false);
        
        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        const rows = document.querySelectorAll('.tags-table tbody tr');
        rows.forEach(row => row.classList.remove('selected'));
        
        showNotification('–í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω', 'info');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-tags-btn');
    if (bulkDeleteBtn) {
        bulkDeleteBtn.disabled = selectedTagIds.length === 0;
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
 */
async function loadTags() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤...', 'info');
        
        const response = await fetch('/admin/tags', { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        allTags = data.tags;
        displayTags(allTags);
        
        showNotification('–¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
 */
function displayTags(tags) {
    const container = document.getElementById('tags-container');
    
    if (!tags || tags.length === 0) {
        container.innerHTML = '<div class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="tags-table">
            <thead>
                <tr>
                    <th></th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                    <th>–°–æ–∑–¥–∞—Ç–µ–ª—å</th>
                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${tags.map(tag => `
                    <tr id="tag-row-${tag.id}">
                        <td class="tag-checkbox-cell">
                            <input type="checkbox" value="${tag.id}" onchange="toggleTagSelection('${tag.id}')">
                        </td>
                        <td>
                            <div class="tag-name">${tag.name}</div>
                        </td>
                        <td class="tag-usage">${tag.usage_count || 0}</td>
                        <td>
                            <div class="tag-creator">${tag.creator_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                        </td>
                        <td class="tag-date">${new Date(tag.created_at).toLocaleDateString()}</td>
                        <td class="tag-actions-cell">
                            <button class="btn btn-danger btn-small" onclick="deleteTag('${tag.id}', '${tag.name}')">
                                üóëÔ∏è
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
 */
async function createTag() {
    const nameInput = document.getElementById('new-tag-name');
    const tagForm = document.querySelector('.tag-form');
    const name = nameInput.value.trim();
    
    if (!name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞', 'warning');
        nameInput.focus();
        return;
    }
    
    if (name.length > 50) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
        nameInput.focus();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ–≥
    const normalizedName = name.toLowerCase().trim();
    const existingTag = allTags.find(tag => tag.name.toLowerCase() === normalizedName);
    if (existingTag) {
        showNotification('–¢–µ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'warning');
        nameInput.focus();
        return;
    }
    
    try {
        showNotification('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞...', 'info');
        
        const response = await fetch('/admin/tags', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ name })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP ${response.status}`);
        }
        
        const result = await response.json();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        if (tagForm) {
            tagForm.classList.add('success');
            setTimeout(() => tagForm.classList.remove('success'), 600);
        }
        
        showNotification(`‚úÖ –¢–µ–≥ "${result.tag?.name || name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`, 'success');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        nameInput.value = '';
        await loadTags();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`, 'error');
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ–≥–∞
 */
async function createQuickTag(tagName) {
    const nameInput = document.getElementById('new-tag-name');
    nameInput.value = tagName;
    await createTag();
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
 */
async function deleteTag(tagId, tagName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tagName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞...', 'info');
        
        const response = await fetch(`/admin/tags/${tagId}`, { method: 'DELETE', credentials: 'include' });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP ${response.status}`);
        }
        
        const result = await response.json();
        showNotification(`‚úÖ –¢–µ–≥ "${tagName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`, 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        await loadTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`, 'error');
    }
}

// ==================== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –¢–ï–ì–û–í ====================

let currentVideoId = null;
let currentVideoInfo = null;
let availableTags = [];
let selectedTagsForVideo = [];

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∫ –≤–∏–¥–µ–æ
 */
async function openTagsModal(videoId, videoDescription, videoAuthor) {
    currentVideoId = videoId;
    currentVideoInfo = {
        description: videoDescription,
        author: videoAuthor
    };
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
        const tagsResponse = await fetch('/admin/tags', { credentials: 'include' });
        if (!tagsResponse.ok) throw new Error(`HTTP ${tagsResponse.status}`);
        const tagsData = await tagsResponse.json();
        availableTags = tagsData.tags || [];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏ –≤–∏–¥–µ–æ
        const videoTagsResponse = await fetch(`/admin/videos/${videoId}/tags`, { credentials: 'include' });
        if (!videoTagsResponse.ok) throw new Error(`HTTP ${videoTagsResponse.status}`);
        const videoTagsData = await videoTagsResponse.json();
        selectedTagsForVideo = videoTagsData.tags || [];
        
        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        createTagsModal();
        showTagsModal();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤', 'error');
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function createTagsModal() {
    const modalHtml = `
        <div class="tags-modal" id="tags-modal">
            <div class="tags-modal-content">
                <div class="tags-modal-header">
                    <h3 class="tags-modal-title">üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ –≤–∏–¥–µ–æ</h3>
                    <button class="tags-modal-close" onclick="closeTagsModal()">√ó</button>
                </div>
                
                <div class="tags-modal-body">
                    <div class="video-info">
                        <h4>${currentVideoInfo.description}</h4>
                        <p>–ê–≤—Ç–æ—Ä: ${currentVideoInfo.author}</p>                
                    </div>
                    
                    <div class="tags-search">
                        <input type="text" id="tags-search-input" placeholder="–ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤..." onkeyup="filterTags()">
                    </div>
                    
                    <div class="tags-list" id="tags-list">
                        ${renderTagsList()}
                    </div>
                </div>
                
                <div class="tags-modal-footer">
                    <button class="btn btn-secondary" onclick="closeTagsModal()">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-tags" onclick="saveVideoTags()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏</button>
                </div>
            </div>
        </div>
    `;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('tags-modal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modal = document.getElementById('tags-modal');
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeTagsModal();
        }
    });
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
 */
function renderTagsList() {
    const searchTerm = document.getElementById('tags-search-input')?.value.toLowerCase() || '';
    const filteredTags = availableTags.filter(tag => 
        tag.name.toLowerCase().includes(searchTerm)
    );
    
    return filteredTags.map(tag => {
        const isSelected = selectedTagsForVideo.some(selectedTag => selectedTag.id === tag.id);
        const selectedTagInfo = selectedTagsForVideo.find(selectedTag => selectedTag.id === tag.id);
        
        return `
            <div class="tag-item ${isSelected ? 'selected' : ''}" data-tag-id="${tag.id}">
                <div class="tag-item-info">
                    <div class="tag-item-name">${tag.name}</div>
                    <div class="tag-item-usage">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${tag.usage_count || 0}</div>
                    <div class="tag-item-creator">
                        <strong>–°–æ–∑–¥–∞—Ç–µ–ª—å:</strong> ${tag.creator_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </div>
                    ${isSelected && selectedTagInfo?.assigned_by_name ? `
                        <div class="tag-item-assigned">
                            <strong>–ü—Ä–∏—Å–≤–æ–∏–ª:</strong> ${selectedTagInfo.assigned_by_name}
                        </div>
                    ` : ''}
                </div>
                <input type="checkbox" class="tag-item-checkbox" ${isSelected ? 'checked' : ''} 
                       onchange="toggleTagSelection('${tag.id}')">
            </div>
        `;
    }).join('');
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
 */
function filterTags() {
    const tagsList = document.getElementById('tags-list');
    if (tagsList) {
        tagsList.innerHTML = renderTagsList();
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
 */
function toggleTagSelection(tagId) {
    const tagIndex = selectedTagsForVideo.findIndex(tag => tag.id === tagId);
    const tag = availableTags.find(t => t.id === tagId);
    
    if (tagIndex > -1) {
        // –£–±–∏—Ä–∞–µ–º —Ç–µ–≥
        selectedTagsForVideo.splice(tagIndex, 1);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
        selectedTagsForVideo.push(tag);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const tagItem = document.querySelector(`[data-tag-id="${tagId}"]`);
    if (tagItem) {
        tagItem.classList.toggle('selected', selectedTagsForVideo.some(t => t.id === tagId));
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function showTagsModal() {
    const modal = document.getElementById('tags-modal');
    if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function closeTagsModal() {
    const modal = document.getElementById('tags-modal');
    if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ
 */
async function saveVideoTags() {
    if (!currentVideoId) return;
    
    try {
        showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤...', 'info');
        
        const response = await fetch(`/admin/videos/${currentVideoId}/tags`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                tagIds: selectedTagsForVideo.map(tag => tag.id)
            })
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        
        if (result.success) {
            showNotification(`–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ`, 'success');
            closeTagsModal();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤', 'error');
    }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–µ–≥–æ–≤
 */
async function fixTagCounters() {
    if (!confirm('–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
        return;
    }
    
    try {
        showNotification('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤...', 'info');
        
        const response = await fetch('/admin/tags/fix-counters', { method: 'POST', credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.fixedCount} –∏–∑ ${result.totalTags} —Ç–µ–≥–æ–≤`, 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤', 'error');
    }
}

// ==================== –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 */
async function loadComments() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...', 'info');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const videoFilter = document.getElementById('comment-video-filter')?.value || '';
        const sortValue = document.getElementById('comment-sort')?.value || 'created_at:desc';
        const [sortBy, order] = sortValue.split(':');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        let url = '/admin/comments/admin/all?limit=100';
        if (videoFilter) {
            url += `&videoId=${videoFilter}`;
        }
        url += `&sortBy=${sortBy}&order=${order}`;
        
        const response = await fetch(url, { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        const comments = data.comments || [];
        
        displayComments(comments);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('comments-total').textContent = data.total || 0;
        
        showNotification(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`, 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', 'error');
        document.getElementById('comments-container').innerHTML = 
            '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 */
function displayComments(comments) {
    const container = document.getElementById('comments-container');
    
    if (!comments || comments.length === 0) {
        container.innerHTML = '<div class="empty-state">üì≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="data-table">
            <thead>
                <tr>
                    <th>–ê–≤—Ç–æ—Ä</th>
                    <th>–¢–µ–∫—Å—Ç</th>
                    <th>–í–∏–¥–µ–æ</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${comments.map(comment => `
                    <tr>
                        <td class="user-cell">
                            <div class="user-info">
                                ${comment.users?.avatar_url 
                                    ? `<img src="${comment.users.avatar_url}" alt="Avatar" class="user-avatar">` 
                                    : '<div class="user-avatar-placeholder">üë§</div>'}
                                <span>${comment.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                            </div>
                        </td>
                        <td class="comment-text-cell">
                            <div class="comment-text">${escapeHtml(comment.text)}</div>
                        </td>
                        <td class="video-desc-cell">
                            <div class="video-desc-short">${escapeHtml(comment.videos?.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}</div>
                        </td>
                        <td class="date-cell">
                            ${formatDate(comment.created_at)}
                        </td>
                        <td class="actions-cell">
                            <button class="btn btn-danger btn-small" onclick="deleteComment('${comment.id}', '${escapeHtml(comment.text.substring(0, 30))}...')">
                                üóëÔ∏è
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
async function deleteComment(commentId, commentPreview) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\n\n"${commentPreview}"`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...', 'info');
        
        const response = await fetch(`/admin/comments/admin/${commentId}`, {
            method: 'DELETE',
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω', 'success');
        loadComments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
    }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 */
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥ –Ω–∞–∑–∞–¥`;

    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
    });
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 10);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
            
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (container && container.children.length === 0) {
                container.remove();
            }
        }, 300);
    }, 3000);
}

// ==================== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –î–õ–Ø –í–ò–î–ï–û ====================

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∏–¥–µ–æ
 */
async function showVideoViews(videoId, videoDescription) {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö...', 'info');
        
        const response = await fetch(`/admin/videos/${videoId}/views`, { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        const views = data.views || [];
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∏–¥–µ–æ: ${videoDescription}</h3>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    ${views.length > 0 && views[0].viewers ? `
                        <div class="views-summary">
                            <div class="views-total">
                                <span class="total-count">${views[0].total_views}</span>
                                <span class="total-label">–≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                            </div>
                        </div>
                        <div class="viewers-list">
                            <h4>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–≤—à–∏–µ –≤–∏–¥–µ–æ:</h4>
                            ${views[0].viewers.length > 0 ? `
                                <div class="viewers-grid">
                                    ${views[0].viewers.map(viewer => `
                                        <div class="viewer-item">
                                            <div class="viewer-avatar">
                                                ${viewer.user.avatar_url ? 
                                                    `<img src="${viewer.user.avatar_url}" alt="${viewer.user.display_name}" class="user-avatar-small">` : 
                                                    `<div class="user-avatar-placeholder">${(viewer.user.display_name || 'U').charAt(0).toUpperCase()}</div>`
                                                }
                                            </div>
                                            <div class="viewer-info">
                                                <div class="viewer-name">${viewer.user.display_name}</div>
                                                <div class="viewer-date">${formatDate(viewer.viewed_at)}</div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            ` : '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö</div>'}
                        </div>
                    ` : '<div class="no-data">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>'}
                </div>
            </div>
        `;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
        
        document.body.appendChild(modal);
        showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${views[0]?.total_views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –æ—Ç ${views[0]?.viewers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', 'error');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–µ–æ
 */
async function showVideoComments(videoId, videoDescription) {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...', 'info');
        
        const response = await fetch(`/admin/videos/${videoId}/comments`, { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        const comments = data.comments || [];
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ: ${videoDescription}</h3>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    ${comments.length > 0 ? `
                        <div class="comments-list">
                            ${comments.map(comment => `
                                <div class="comment-item">
                                    <div class="comment-header">
                                        <div class="comment-user">
                                            ${comment.users?.avatar_url ? 
                                                `<img src="${comment.users.avatar_url}" alt="${comment.users.display_name}" class="user-avatar-small">` : 
                                                `<div class="user-avatar-placeholder">${(comment.users?.display_name || 'U').charAt(0).toUpperCase()}</div>`
                                            }
                                            <span class="user-name">${comment.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                                        </div>
                                        <div class="comment-date">${new Date(comment.created_at).toLocaleString()}</div>
                                    </div>
                                    <div class="comment-text">${escapeHtml(comment.text)}</div>
                                </div>
                            `).join('')}
                        </div>
                    ` : '<div class="no-data">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>'}
                </div>
            </div>
        `;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
        
        document.body.appendChild(modal);
        showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', 'error');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ª–∞–π–∫–∏ –≤–∏–¥–µ–æ
 */
async function showVideoLikes(videoId, videoDescription) {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∞–π–∫–æ–≤...', 'info');
        
        const response = await fetch(`/admin/videos/${videoId}/likes`, { credentials: 'include' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        const likes = data.likes || [];
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚ù§Ô∏è –õ–∞–π–∫–∏ –∫ –≤–∏–¥–µ–æ: ${videoDescription}</h3>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    ${likes.length > 0 ? `
                        <div class="likes-list">
                            ${likes.map(like => `
                                <div class="like-item">
                                    <div class="like-header">
                                        <div class="like-user">
                                            ${like.users?.avatar_url ? 
                                                `<img src="${like.users.avatar_url}" alt="${like.users.display_name}" class="user-avatar-small">` : 
                                                `<div class="user-avatar-placeholder">${(like.users?.display_name || 'U').charAt(0).toUpperCase()}</div>`
                                            }
                                            <span class="user-name">${like.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                                        </div>
                                        <div class="like-date">${new Date(like.created_at).toLocaleString()}</div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    ` : '<div class="no-data">–õ–∞–π–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>'}
                </div>
            </div>
        `;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
        
        document.body.appendChild(modal);
        showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${likes.length} –ª–∞–π–∫–æ–≤`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤', 'error');
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GeoClips –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
    loadUsers();
});
