/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GeoClips
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
let allTags = [];
let filteredTags = [];
let selectedVideoIds = [];
let currentUsersPage = 0;
let currentVideosPage = 0;
const ITEMS_PER_PAGE = 20;

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
 */
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const selectedTab = document.getElementById(`tab-${tabName}`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    switch(tabName) {
        case 'dashboard':
            loadStats();
            loadDashboardChart();
            break;
        case 'analytics':
            loadAnalytics();
            break;
        case 'users':
            loadUsers();
            break;
        case 'videos':
            loadVideos();
            break;
        case 'tags':
            loadTags();
            break;
        case 'system':
            loadSystemInfo();
            break;
        case 'logs':
            loadActivityLogs();
            break;
    }
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
 */
async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏?')) return;
    
    try {
        const response = await fetch('/admin/logout', { method: 'POST' });
        
        if (response.ok) {
            window.location.href = '/admin';
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', 'error');
    }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function loadStats() {
    try {
        const response = await fetch('/admin/stats');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        document.getElementById('users-count').textContent = data.usersCount || 0;
        document.getElementById('videos-count').textContent = data.videosCount || 0;
        document.getElementById('total-views').textContent = data.totalViews || 0;
        document.getElementById('total-likes').textContent = data.totalLikes || 0;
        document.getElementById('tags-count').textContent = data.tagsCount || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
 */
async function loadDashboardChart() {
    try {
        const response = await fetch('/admin/analytics');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
        const chartContainer = document.getElementById('dashboard-chart');
        chartContainer.innerHTML = `
            <div class="stats-summary">
                <p><strong>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</strong></p>
                <p>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.period.last7Days.users}</p>
                <p>–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ: ${data.period.last7Days.videos}</p>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
async function loadAnalytics() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...', 'info');
        
        const response = await fetch('/admin/analytics');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
        document.getElementById('analytics-users-7d').textContent = data.period.last7Days.users;
        document.getElementById('analytics-videos-7d').textContent = data.period.last7Days.videos;
        document.getElementById('analytics-users-30d').textContent = data.period.last30Days.users;
        document.getElementById('analytics-videos-30d').textContent = data.period.last30Days.videos;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const topUsersList = document.getElementById('top-users-list');
        topUsersList.innerHTML = data.topUsers.map(user => `
            <div class="top-item">
                <span class="user-name">${user.user_name}</span>
                <span class="count">${user.videos_count} –≤–∏–¥–µ–æ</span>
            </div>
        `).join('');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø –≤–∏–¥–µ–æ
        const topVideosList = document.getElementById('top-videos-list');
        topVideosList.innerHTML = data.topVideos.map(video => `
            <div class="top-item">
                <span class="video-title">${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</span>
                <span class="count">${video.views_count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
            </div>
        `).join('');
        
        showNotification('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'error');
    }
}

// ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function loadUsers() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'info');
        
        const response = await fetch('/admin/users');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayUsers(data.users);
        
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function displayUsers(users) {
    const container = document.getElementById('users-container');
    
    if (!users || users.length === 0) {
        container.innerHTML = '<div class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = users.map(user => `
        <div class="user-card">
            <div class="user-info">
                <div class="user-avatar">
                    ${user.avatar_url ? `<img src="${user.avatar_url}" alt="Avatar">` : 'üë§'}
                </div>
                <div class="user-details">
                    <h3>${user.display_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</h3>
                    <p>ID: ${user.id}</p>
                    <p>Yandex ID: ${user.yandex_id}</p>
                    <p>–í–∏–¥–µ–æ: ${user.videosCount || 0}</p>
                    <p>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}</p>
                </div>
            </div>
            <div class="user-actions">
                <button class="btn btn-danger" onclick="deleteUser('${user.id}', '${user.display_name}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function searchUsers() {
    const query = document.getElementById('users-search').value;
    const sortBy = document.getElementById('users-sort').value;
    const order = document.getElementById('users-order').value;
    
    try {
        showNotification('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'info');
        
        const params = new URLSearchParams({
            query: query || '',
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentUsersPage * ITEMS_PER_PAGE
        });
        
        const response = await fetch(`/admin/users/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayUsers(data.data);
        
        showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function deleteUser(userId, userName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
        
        const response = await fetch(`/admin/users/${userId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.deletedVideos}`, 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadUsers();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

// ==================== –í–ò–î–ï–û ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
 */
async function loadVideos() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...', 'info');
        
        const response = await fetch('/admin/videos/admin');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayVideos(data.videos);
        
        showNotification('–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
function displayVideos(videos) {
    const container = document.getElementById('videos-container');
    
    if (!videos || videos.length === 0) {
        container.innerHTML = '<div class="no-data">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = videos.map(video => `
        <div class="video-card">
            <div class="video-checkbox">
                <input type="checkbox" value="${video.id}" onchange="toggleVideoSelection('${video.id}')">
            </div>
            <div class="video-info">
                <h3>${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</h3>
                <p>–ê–≤—Ç–æ—Ä: ${video.users?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${video.views_count || 0}</p>
                <p>–õ–∞–π–∫–∏: ${video.likes_count || 0}</p>
                <p>–î–∞—Ç–∞: ${new Date(video.created_at).toLocaleDateString()}</p>
                ${video.latitude && video.longitude ? 
                    `<p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${video.latitude.toFixed(4)}, ${video.longitude.toFixed(4)}</p>` : 
                    '<p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>'
                }
            </div>
            <div class="video-actions">
                <button class="btn btn-danger" onclick="deleteVideo('${video.id}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

/**
 * –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
 */
async function searchVideos() {
    const query = document.getElementById('videos-search').value;
    const minViews = document.getElementById('videos-min-views').value;
    const minLikes = document.getElementById('videos-min-likes').value;
    const sortBy = document.getElementById('videos-sort').value;
    const order = document.getElementById('videos-order').value;
    
    try {
        showNotification('–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...', 'info');
        
        const params = new URLSearchParams({
            query: query || '',
            minViews: minViews || '',
            minLikes: minLikes || '',
            sortBy,
            order,
            limit: ITEMS_PER_PAGE,
            offset: currentVideosPage * ITEMS_PER_PAGE
        });
        
        const response = await fetch(`/admin/videos/admin/search?${params}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayVideos(data.data);
        
        showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
async function deleteVideo(videoId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...', 'info');
        
        const response = await fetch(`/admin/videos/admin/${videoId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification('–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadVideos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', 'error');
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ
 */
function toggleVideoSelection(videoId) {
    const index = selectedVideoIds.indexOf(videoId);
    if (index > -1) {
        selectedVideoIds.splice(index, 1);
    } else {
        selectedVideoIds.push(videoId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const bulkDeleteBtn = document.getElementById('bulk-delete-videos-btn');
    bulkDeleteBtn.disabled = selectedVideoIds.length === 0;
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
async function bulkDeleteVideos() {
    if (selectedVideoIds.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedVideoIds.length} –≤–∏–¥–µ–æ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...', 'info');
        
        const response = await fetch('/admin/videos/admin/bulk', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ videoIds: selectedVideoIds })
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${result.count}`, 'success');
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        selectedVideoIds = [];
        loadVideos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
    }
}

// ==================== –¢–ï–ì–ò ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
 */
async function loadTags() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤...', 'info');
        
        const response = await fetch('/admin/tags');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        allTags = data.tags;
        displayTags(allTags);
        
        showNotification('–¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
 */
function displayTags(tags) {
    const container = document.getElementById('tags-container');
    
    if (!tags || tags.length === 0) {
        container.innerHTML = '<div class="no-data">–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = tags.map(tag => `
        <div class="tag-card">
            <div class="tag-info">
                <h3>${tag.name}</h3>
                <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${tag.usage_count || 0}</p>
                <p>–°–æ–∑–¥–∞—Ç–µ–ª—å: ${tag.creator_name || '–°–∏—Å—Ç–µ–º–∞'}</p>
                <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(tag.created_at).toLocaleDateString()}</p>
            </div>
            <div class="tag-actions">
                <button class="btn btn-danger" onclick="deleteTag('${tag.id}', '${tag.name}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
 */
async function createTag() {
    const nameInput = document.getElementById('new-tag-name');
    const name = nameInput.value.trim();
    
    if (!name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞', 'warning');
        return;
    }
    
    if (name.length > 50) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
        return;
    }
    
    try {
        showNotification('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞...', 'info');
        
        const response = await fetch('/admin/tags', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name })
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification('–¢–µ–≥ —Å–æ–∑–¥–∞–Ω', 'success');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        nameInput.value = '';
        loadTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞', 'error');
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
 */
async function deleteTag(tagId, tagName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tagName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞...', 'info');
        
        const response = await fetch(`/admin/tags/${tagId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification('–¢–µ–≥ —É–¥–∞–ª–µ–Ω', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', 'error');
    }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–µ–≥–æ–≤
 */
async function fixTagCounters() {
    if (!confirm('–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
        return;
    }
    
    try {
        showNotification('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤...', 'info');
        
        const response = await fetch('/admin/tags/fix-counters', { method: 'POST' });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.fixedCount} –∏–∑ ${result.totalTags} —Ç–µ–≥–æ–≤`, 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadTags();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤', 'error');
    }
}

// ==================== –°–ò–°–¢–ï–ú–ê ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function loadSystemInfo() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...', 'info');
        
        const response = await fetch('/admin/system/info');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displaySystemInfo(data);
        
        showNotification('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
function displaySystemInfo(info) {
    const container = document.getElementById('system-info-container');
    
    container.innerHTML = `
        <div class="system-info">
            <div class="info-section">
                <h3>üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h3>
                <p>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${info.os.platform}</p>
                <p>–•–æ—Å—Ç: ${info.os.hostname}</p>
                <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(info.os.uptime / 3600)} —á–∞—Å–æ–≤</p>
                <p>Node.js: ${info.os.nodeVersion}</p>
            </div>
            
            <div class="info-section">
                <h3>üíæ –ü–∞–º—è—Ç—å</h3>
                <p>–û–±—â–∞—è: ${Math.round(info.memory.total / 1024 / 1024)} MB</p>
                <p>–°–≤–æ–±–æ–¥–Ω–∞—è: ${Math.round(info.memory.free / 1024 / 1024)} MB</p>
                <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${Math.round(info.memory.used / 1024 / 1024)} MB</p>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞: ${info.memory.usagePercent}%</p>
            </div>
            
            <div class="info-section">
                <h3>‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</h3>
                <p>–Ø–¥—Ä–∞: ${info.cpu.count}</p>
                <p>–ú–æ–¥–µ–ª—å: ${info.cpu.model}</p>
            </div>
            
            <div class="info-section">
                <h3>üîÑ –ü—Ä–æ—Ü–µ—Å—Å Node.js</h3>
                <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(info.process.uptime / 3600)} —á–∞—Å–æ–≤</p>
                <p>RSS: ${Math.round(info.process.memory.rss / 1024 / 1024)} MB</p>
                <p>Heap Total: ${Math.round(info.process.memory.heapTotal / 1024 / 1024)} MB</p>
                <p>Heap Used: ${Math.round(info.process.memory.heapUsed / 1024 / 1024)} MB</p>
            </div>
        </div>
    `;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
 */
async function exportData(type, format) {
    try {
        showNotification('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', 'info');
        
        const response = await fetch(`/admin/system/export/${type}?format=${format}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${type}_export_${Date.now()}.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanupData(type) {
    const messages = {
        'unused_tags': '—É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏',
        'old_videos': '—É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)'
    };
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${messages[type]}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }
    
    try {
        showNotification('–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 'info');
        
        const response = await fetch('/admin/system/cleanup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type })
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const result = await response.json();
        showNotification(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.deletedCount}`, 'success');
        loadStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// ==================== –õ–û–ì–ò ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function loadActivityLogs() {
    try {
        showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...', 'info');
        
        const response = await fetch('/admin/activity-logs');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        
        const data = await response.json();
        displayActivityLogs(data.logs);
        
        showNotification('–õ–æ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤', 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function displayActivityLogs(logs) {
    const container = document.getElementById('activity-logs-container');
    
    if (!logs || logs.length === 0) {
        container.innerHTML = '<div class="no-data">–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = logs.map(log => `
        <div class="log-entry">
            <div class="log-time">${new Date(log.timestamp).toLocaleString()}</div>
            <div class="log-type">${log.type}</div>
            <div class="log-user">${log.user}</div>
            <div class="log-description">${log.description}</div>
        </div>
    `).join('');
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
 */
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadStats, 30000);
    
    console.log('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GeoClips –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});
