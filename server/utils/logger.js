/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const config = require('../config/environment');

class Logger {
  constructor() {
    this.isDevelopment = config.nodeEnv === 'development';
    this.isProduction = config.nodeEnv === 'production';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  _format(level, component, message, data) {
    const timestamp = new Date().toISOString();
    const dataStr = data ? ` | ${JSON.stringify(data)}` : '';
    return `[${timestamp}] [${level}] [${component}] ${message}${dataStr}`;
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω—è–º–∏
  log(level, component, message, data = null) {
    const emoji = {
      error: '‚ùå',
      warn: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è',
      debug: 'üîç',
      success: '‚úÖ',
      loading: 'üîÑ',
      cache: 'üíæ',
      avatar: 'üë§',
      video: 'üì∫',
      map: 'üó∫Ô∏è',
      auth: 'üîê',
      upload: 'üì§',
      download: 'üì•'
    };

    const icon = emoji[level] || 'üìù';
    const logMessage = `${icon} [${component}] ${message}`;
    const logData = data ? ` | ${JSON.stringify(data)}` : '';

    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
    if (this.isDevelopment) {
      switch (level) {
        case 'error':
          console.error(logMessage + logData);
          break;
        case 'warn':
          console.warn(logMessage + logData);
          break;
        default:
          console.log(logMessage + logData);
      }
    }
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    else if (this.isProduction && ['error', 'warn', 'success'].includes(level)) {
      console.log(this._format(level, component, message, data));
    }
  }

  error(component, message, data) {
    this.log('error', component, message, data);
  }

  warn(component, message, data) {
    this.log('warn', component, message, data);
  }

  info(component, message, data) {
    this.log('info', component, message, data);
  }

  debug(component, message, data) {
    this.log('debug', component, message, data);
  }

  success(component, message, data) {
    this.log('success', component, message, data);
  }

  loading(component, message, data) {
    this.log('loading', component, message, data);
  }

  cache(component, message, data) {
    this.log('cache', component, message, data);
  }

  auth(message, data) {
    this.log('auth', 'AUTH', message, data);
  }

  video(message, data) {
    this.log('video', 'VIDEO', message, data);
  }

  map(message, data) {
    this.log('map', 'MAP', message, data);
  }
}

module.exports = new Logger();

