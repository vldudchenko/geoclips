/**
 * –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã
 */

const express = require('express');
const router = express.Router();
const { requireAdmin } = require('../middleware/auth');
const supabase = require('../config/supabase');
const logger = require('../utils/logger');
const { readFile, access } = require('fs').promises;
const path = require('path');

/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const adminIds = process.env.ADMIN_IDS?.split(',') || [];
    
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω–∫–µ', {
      isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
      hasUser: !!req.user,
      userId: req.user?.dbUser?.id,
      url: req.url,
      method: req.method,
      adminIds: adminIds,
      adminIdsLength: adminIds.length
    });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (!req.isAuthenticated || !req.isAuthenticated() || !req.user) {
      logger.info('ADMIN', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
      const loginHtml = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GeoClips Admin - –í—Ö–æ–¥</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    animation: gradientShift 15s ease infinite;
                    background-size: 200% 200%;
                }
                @keyframes gradientShift {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }
                .login-container {
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(20px);
                    border-radius: 24px;
                    padding: 40px;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                    width: 90%;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                }
                .login-container h1 {
                    color: #333;
                    margin-bottom: 20px;
                    font-size: 2rem;
                }
                .login-container p {
                    color: #666;
                    margin-bottom: 30px;
                    line-height: 1.5;
                }
                .login-btn {
                    background: linear-gradient(135deg, #ffcc00 0%, #e6b800 100%);
                    color: #000;
                    border: none;
                    padding: 16px 32px;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    box-shadow: 0 4px 15px rgba(255, 204, 0, 0.3);
                }
                .login-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(255, 204, 0, 0.4);
                }
                .warning {
                    background: #fff3cd;
                    color: #856404;
                    padding: 15px;
                    border-radius: 8px;
                    margin-top: 20px;
                    border-left: 4px solid #ffc107;
                }
            </style>
        </head>
        <body>
            <div class="login-container">
                <h1>üé• GeoClips Admin</h1>
                <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å</p>
                <a href="/auth/yandex?returnTo=/admin" class="login-btn">üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å</a>
                <div class="warning">
                    <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> ${adminIds.length > 0 ? 
                      '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ADMIN_IDS' : 
                      '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (ADMIN_IDS –Ω–µ –∑–∞–¥–∞–Ω–∞)'
                    }
                </div>
            </div>
        </body>
        </html>
      `;
      return res.send(loginHtml);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const userId = req.user?.dbUser?.id;
    
    logger.info('ADMIN', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ', {
      userId: userId,
      adminIds: adminIds,
      isAuthenticated: req.isAuthenticated(),
      hasUser: !!req.user
    });
    
    // –ï—Å–ª–∏ ADMIN_IDS –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (adminIds.length > 0 && !adminIds.includes(userId)) {
      const accessDeniedHtml = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GeoClips Admin - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .error-container {
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(20px);
                    border-radius: 24px;
                    padding: 40px;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                    width: 90%;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                }
                .error-container h1 {
                    color: #dc3545;
                    margin-bottom: 20px;
                    font-size: 2rem;
                }
                .error-container p {
                    color: #666;
                    margin-bottom: 30px;
                    line-height: 1.5;
                }
                .back-btn {
                    background: #6c757d;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 8px;
                    font-size: 14px;
                    cursor: pointer;
                    text-decoration: none;
                    display: inline-block;
                }
                .back-btn:hover {
                    background: #5a6268;
                }
            </style>
        </head>
        <body>
            <div class="error-container">
                <h1>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
                <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
                <p><strong>–í–∞—à ID:</strong> ${userId}</p>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.</p>
                <a href="/auth/logout" class="back-btn">–í—ã–π—Ç–∏</a>
            </div>
        </body>
        </html>
      `;
      return res.send(accessDeniedHtml);
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É
    try {
      const htmlPath = path.join(__dirname, '../views/admin.html');
      logger.info('ADMIN', '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–∫–∏', { htmlPath });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      try {
        await access(htmlPath);
      } catch (accessError) {
        logger.error('ADMIN', '–§–∞–π–ª –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', { htmlPath, error: accessError.message });
        throw new Error(`–§–∞–π–ª –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
      }
      
      const html = await readFile(htmlPath, 'utf-8');
      res.send(html);
    } catch (fileError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∫–∏', fileError);
      
      // Fallback HTML –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
      const fallbackHtml = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GeoClips Admin Panel</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
                .error { color: #dc3545; background: #f8d7da; padding: 15px; border-radius: 4px; margin-bottom: 20px; }
                .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé• GeoClips Admin Panel</h1>
                <div class="error">
                    <strong>–û—à–∏–±–∫–∞:</strong> –§–∞–π–ª –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è.
                </div>
                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</p>
                <div id="stats">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                <button class="btn" onclick="loadStats()">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
            </div>
            <script>
                async function loadStats() {
                    try {
                        const response = await fetch('/admin/stats');
                        const data = await response.json();
                        document.getElementById('stats').innerHTML = 
                            \`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \${data.usersCount || 0}<br>
                             –í–∏–¥–µ–æ: \${data.videosCount || 0}<br>
                             –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: \${data.totalViews || 0}<br>
                             –õ–∞–π–∫–æ–≤: \${data.totalLikes || 0}\`;
                    } catch (error) {
                        document.getElementById('stats').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
                    }
                }
                loadStats();
            </script>
        </body>
        </html>
      `;
      res.send(fallbackHtml);
    }
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', { 
      message: error.message, 
      stack: error.stack,
      userId: req.user?.dbUser?.id,
      isAuthenticated: req.isAuthenticated()
    });
    res.status(500).send(`
      <html>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h1>–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∫–∏</h1>
          <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.</p>
          <p>–û—à–∏–±–∫–∞: ${error.message}</p>
          <a href="/admin">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
        </body>
      </html>
    `);
  }
});

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
 */
router.post('/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
    logger.success('ADMIN', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω–∫–∏');
    res.json({ success: true, redirect: '/admin' });
  });
});

/**
 * CSS —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/admin.css', async (req, res) => {
  try {
    const cssPath = path.join(__dirname, '../views/admin.css');
    const css = await readFile(cssPath, 'utf-8');
    res.type('text/css').send(css);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS', error);
    res.status(500).send('/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS */');
  }
});

/**
 * JS —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/admin.js', async (req, res) => {
  try {
    const jsPath = path.join(__dirname, '../views/admin.js');
    const js = await readFile(jsPath, 'utf-8');
    res.type('application/javascript').send(js);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS', error);
    res.status(500).send('// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS');
  }
});

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
 */
router.get('/test', async (req, res) => {
  try {
    logger.info('ADMIN', '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    res.json({ message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!', timestamp: new Date().toISOString() });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
router.get('/stats', async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { count: usersCount } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    const { count: videosCount } = await supabase
      .from('videos')
      .select('*', { count: 'exact', head: true });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const { data: videosData } = await supabase
      .from('videos')
      .select('views_count');

    const totalViews = videosData?.reduce((sum, video) => sum + (video.views_count || 0), 0) || 0;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const { data: likesData } = await supabase
      .from('videos')
      .select('likes_count');

    const totalLikes = likesData?.reduce((sum, video) => sum + (video.likes_count || 0), 0) || 0;

    const stats = {
      usersCount: usersCount || 0,
      videosCount: videosCount || 0,
      totalViews,
      totalLikes
    };

    logger.info('ADMIN', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞', stats);
    res.json(stats);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get('/users', async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    const { data: users, error } = await supabase
      .from('users')
      .select('id, yandex_id, first_name, last_name, display_name, avatar_url, created_at, updated_at')
      .order('created_at', { ascending: false });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', { count: users?.length || 0 });
    res.json(users || []);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
 */
router.get('/videos', async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ');
    
    const { data: videos, error } = await supabase
      .from('videos')
      .select(`
        id,
        user_id,
        description,
        video_url,
        thumbnail_url,
        latitude,
        longitude,
        duration_seconds,
        likes_count,
        views_count,
        created_at,
        updated_at,
        users (
          id,
          yandex_id,
          display_name,
          avatar_url
        )
      `)
      .order('created_at', { ascending: false });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
    }

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ', { count: videos?.length || 0 });
    res.json(videos || []);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
router.delete('/videos/:id', requireAdmin, async (req, res) => {
  try {
    const videoId = req.params.id;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const { data: video, error: fetchError } = await supabase
      .from('videos')
      .select('video_url, thumbnail_url')
      .eq('id', videoId)
      .single();

    if (fetchError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', fetchError);
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    const { error: tagsError } = await supabase
      .from('video_tags')
      .delete()
      .eq('video_id', videoId);

    if (tagsError) {
      logger.warn('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤–∏–¥–µ–æ', tagsError);
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { error: deleteError } = await supabase
      .from('videos')
      .delete()
      .eq('id', videoId);

    if (deleteError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', deleteError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
    }

    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage
    // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã

    logger.info('ADMIN', '–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ', { videoId });
    res.json({ message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
 */
router.get('/tags', async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤');
    
    const { data: tags, error } = await supabase
      .from('tags')
      .select(`
        id,
        name,
        created_at,
        video_tags (
          video_id
        )
      `)
      .order('name', { ascending: true });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    const tagsWithCount = tags?.map(tag => ({
      ...tag,
      usage_count: tag.video_tags?.length || 0
    })) || [];

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã —Ç–µ–≥–∏', { count: tagsWithCount.length });
    res.json(tagsWithCount);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
 */
router.delete('/tags/:id', requireAdmin, async (req, res) => {
  try {
    const tagId = req.params.id;
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Ç–µ–≥–∞ —Å –≤–∏–¥–µ–æ
    const { error: videoTagsError } = await supabase
      .from('video_tags')
      .delete()
      .eq('tag_id', tagId);

    if (videoTagsError) {
      logger.warn('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–µ–≥–∞ —Å –≤–∏–¥–µ–æ', videoTagsError);
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { error: deleteError } = await supabase
      .from('tags')
      .delete()
      .eq('id', tagId);

    if (deleteError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', deleteError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞' });
    }

    logger.info('ADMIN', '–¢–µ–≥ —É–¥–∞–ª–µ–Ω', { tagId });
    res.json({ message: '–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞' });
  }
});

module.exports = router;

