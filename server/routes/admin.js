/**
 * –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã
 */

const express = require('express');
const router = express.Router();
const ffmpeg = require('fluent-ffmpeg');
const { requireAdmin } = require('../middleware/auth');
const supabase = require('../config/supabase');
const logger = require('../utils/logger');
const { readFile, access } = require('fs').promises;
const path = require('path');

/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = require('../config/environment');
    const adminIds = config.admin.ids;
    
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω–∫–µ', {
      isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
      hasUser: !!req.user,
      userId: req.user?.dbUser?.id,
      url: req.url,
      method: req.method,
      adminIds: adminIds,
      adminIdsLength: adminIds.length,
      sessionId: req.sessionID,
      userAgent: req.get('User-Agent')
    });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (!req.isAuthenticated || !req.isAuthenticated() || !req.user) {
      logger.warn('ADMIN', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞', {
        isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
        hasUser: !!req.user,
        sessionId: req.sessionID,
        cookies: req.headers.cookie
      });
      const loginHtml = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GeoClips Admin - –í—Ö–æ–¥</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    animation: gradientShift 15s ease infinite;
                    background-size: 200% 200%;
                }
                @keyframes gradientShift {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }
                .login-container {
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(20px);
                    border-radius: 24px;
                    padding: 40px;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                    width: 90%;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                }
                .login-container h1 {
                    color: #333;
                    margin-bottom: 20px;
                    font-size: 2rem;
                }
                .login-container p {
                    color: #666;
                    margin-bottom: 30px;
                    line-height: 1.5;
                }
                .login-btn {
                    background: linear-gradient(135deg, #ffcc00 0%, #e6b800 100%);
                    color: #000;
                    border: none;
                    padding: 16px 32px;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    box-shadow: 0 4px 15px rgba(255, 204, 0, 0.3);
                }
                .login-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(255, 204, 0, 0.4);
                }
                .warning {
                    background: #fff3cd;
                    color: #856404;
                    padding: 15px;
                    border-radius: 8px;
                    margin-top: 20px;
                    border-left: 4px solid #ffc107;
                }
            </style>
        </head>
        <body>
            <div class="login-container">
                <h1>üé• GeoClips Admin</h1>
                <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å</p>
                <a href="/auth/yandex?returnTo=/admin" class="login-btn">üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å</a>
                
            </div>
        </body>
        </html>
      `;
      return res.send(loginHtml);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const userId = req.user?.dbUser?.id;
    
    logger.info('ADMIN', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ', {
      userId: userId,
      adminIds: adminIds,
      isAuthenticated: req.isAuthenticated(),
      hasUser: !!req.user
    });
    
    // –ï—Å–ª–∏ ADMIN_IDS –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (adminIds.length > 0 && !adminIds.includes(userId)) {
      const accessDeniedHtml = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GeoClips Admin - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .error-container {
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(20px);
                    border-radius: 24px;
                    padding: 40px;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                    width: 90%;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                }
                .error-container h1 {
                    color: #dc3545;
                    margin-bottom: 20px;
                    font-size: 2rem;
                }
                .error-container p {
                    color: #666;
                    margin-bottom: 30px;
                    line-height: 1.5;
                }
                .back-btn {
                    background: #6c757d;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 8px;
                    font-size: 14px;
                    cursor: pointer;
                    text-decoration: none;
                    display: inline-block;
                }
                .back-btn:hover {
                    background: #5a6268;
                }
            </style>
        </head>
        <body>
            <div class="error-container">
                <h1>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
                <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
                <p><strong>–í–∞—à ID:</strong> ${userId}</p>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.</p>
                <a href="/auth/logout" class="back-btn">–í—ã–π—Ç–∏</a>
            </div>
        </body>
        </html>
      `;
      return res.send(accessDeniedHtml);
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É
    try {
      const htmlPath = path.join(__dirname, '../views/admin.html');
      logger.info('ADMIN', '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–∫–∏', { htmlPath });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      try {
        await access(htmlPath);
      } catch (accessError) {
        logger.error('ADMIN', '–§–∞–π–ª –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', { htmlPath, error: accessError.message });
        throw new Error(`–§–∞–π–ª –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
      }
      
      const html = await readFile(htmlPath, 'utf-8');
      res.send(html);
    } catch (fileError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∫–∏', fileError);      
    }
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', { 
      message: error.message, 
      stack: error.stack,
      userId: req.user?.dbUser?.id,
      isAuthenticated: req.isAuthenticated()
    });
    res.status(500).send(`
      <html>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h1>–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∫–∏</h1>
          <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.</p>
          <p>–û—à–∏–±–∫–∞: ${error.message}</p>
          <a href="/admin">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
        </body>
      </html>
    `);
  }
});

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
 */
router.post('/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
    logger.success('ADMIN', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω–∫–∏');
    res.json({ success: true, redirect: '/admin' });
  });
});

/**
 * CSS —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/admin.css', async (req, res) => {
  try {
    const cssPath = path.join(__dirname, '../views/admin.css');
    const css = await readFile(cssPath, 'utf-8');
    res.type('text/css').send(css);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS', error);
    res.status(500).send('/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS */');
  }
});

/**
 * JS —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/admin.js', async (req, res) => {
  try {
    const jsPath = path.join(__dirname, '../views/admin.js');
    const js = await readFile(jsPath, 'utf-8');
    res.type('application/javascript').send(js);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS', error);
    res.status(500).send('// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS');
  }
});

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
 */
router.get('/test', async (req, res) => {
  try {
    logger.info('ADMIN', '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    res.json({ message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!', timestamp: new Date().toISOString() });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
router.get('/stats', requireAdmin, async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { count: usersCount } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    const { count: videosCount } = await supabase
      .from('videos')
      .select('*', { count: 'exact', head: true });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const { data: videosData } = await supabase
      .from('videos')
      .select('views_count');

    const totalViews = videosData?.reduce((sum, video) => sum + (video.views_count || 0), 0) || 0;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const { data: likesData } = await supabase
      .from('videos')
      .select('likes_count');

    const totalLikes = likesData?.reduce((sum, video) => sum + (video.likes_count || 0), 0) || 0;

    const stats = {
      usersCount: usersCount || 0,
      videosCount: videosCount || 0,
      totalViews,
      totalLikes
    };

    logger.info('ADMIN', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞', stats);
    res.json(stats);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get('/users', requireAdmin, async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    const { data: users, error } = await supabase
      .from('users')
      .select(`
        id,
        yandex_id,
        first_name,
        last_name,
        display_name,
        avatar_url,
        created_at,
        updated_at
      `)
      .order('created_at', { ascending: false });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIds = users?.map(user => user.id) || [];
    let videosCounts = {};
    
    if (userIds.length > 0) {
      const { data: videoCounts, error: countError } = await supabase
        .from('videos')
        .select('user_id')
        .in('user_id', userIds);
      
      if (!countError && videoCounts) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        videosCounts = videoCounts.reduce((acc, video) => {
          acc[video.user_id] = (acc[video.user_id] || 0) + 1;
          return acc;
        }, {});
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedUsers = users?.map(user => ({
      ...user,
      videos_count: videosCounts[user.id] || 0
    })) || [];

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', { count: processedUsers.length });
    res.json(processedUsers);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
 */
router.get('/videos', requireAdmin, async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ');
    
     const { data: videos, error } = await supabase
       .from('videos')
       .select(`
         id,
         user_id,
         description,
         video_url,
         latitude,
         longitude,
         likes_count,
         views_count,
         created_at,
         updated_at,
         users (
           id,
           yandex_id,
           display_name,
           avatar_url
         )
       `)
       .order('created_at', { ascending: false });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
    }

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ', { count: videos?.length || 0 });
    res.json(videos || []);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
router.delete('/videos/:id', requireAdmin, async (req, res) => {
  try {
    const videoId = req.params.id;
    
     // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
     const { data: video, error: fetchError } = await supabase
       .from('videos')
       .select('video_url')
       .eq('id', videoId)
       .single();

    if (fetchError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', fetchError);
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    const { error: tagsError } = await supabase
      .from('video_tags')
      .delete()
      .eq('video_id', videoId);

    if (tagsError) {
      logger.warn('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤–∏–¥–µ–æ', tagsError);
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { error: deleteError } = await supabase
      .from('videos')
      .delete()
      .eq('id', videoId);

    if (deleteError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', deleteError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
    }

    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage
    // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã

    logger.info('ADMIN', '–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ', { videoId });
    res.json({ message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
 */
router.get('/tags', requireAdmin, async (req, res) => {
  try {
    logger.info('ADMIN', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤');
    
    const { data: tags, error } = await supabase
      .from('tags')
      .select(`
        id,
        name,
        usage_count,
        created_at
      `)
      .order('name', { ascending: true });

    if (error) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
    }

    logger.info('ADMIN', '–ü–æ–ª—É—á–µ–Ω—ã —Ç–µ–≥–∏', { count: tags?.length || 0 });
    res.json(tags || []);
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
 */
router.delete('/tags/:id', requireAdmin, async (req, res) => {
  try {
    const tagId = req.params.id;
    
    logger.info('ADMIN', '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞', { tagId });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { data: tag, error: tagError } = await supabase
      .from('tags')
      .select('name, usage_count')
      .eq('id', tagId)
      .single();

    if (tagError || !tag) {
      logger.warn('ADMIN', '–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω', { tagId });
      return res.status(404).json({ error: '–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const usageCount = tag.usage_count || 0;
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Ç–µ–≥–∞ —Å –≤–∏–¥–µ–æ
    const { error: videoTagsError } = await supabase
      .from('video_tags')
      .delete()
      .eq('tag_id', tagId);

    if (videoTagsError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–µ–≥–∞ —Å –≤–∏–¥–µ–æ', videoTagsError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–µ–≥–∞' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞ –Ω–∞ 0 –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { error: updateError } = await supabase
      .from('tags')
      .update({ usage_count: 0 })
      .eq('id', tagId);

    if (updateError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–µ–≥–∞', updateError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { error: deleteError } = await supabase
      .from('tags')
      .delete()
      .eq('id', tagId);

    if (deleteError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', deleteError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞' });
    }

    logger.success('ADMIN', '–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', { 
      tagId, 
      tagName: tag.name, 
      usageCount: usageCount 
    });
    res.json({ 
      message: '–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      tagName: tag.name,
      deletedConnections: usageCount
    });
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞' });
  }
});

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤
 */
router.post('/tags/fix-counters', requireAdmin, async (req, res) => {
  try {
    logger.info('ADMIN', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    const { data: tags, error: tagsError } = await supabase
      .from('tags')
      .select('id, name, usage_count');
    
    if (tagsError) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤', tagsError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
    }
    
    let fixedCount = 0;
    const results = [];
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    for (const tag of tags) {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π
      const { count: realCount, error: countError } = await supabase
        .from('video_tags')
        .select('*', { count: 'exact', head: true })
        .eq('tag_id', tag.id);
      
      if (countError) {
        logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–≤—è–∑–µ–π –¥–ª—è —Ç–µ–≥–∞', { tagId: tag.id, error: countError });
        continue;
      }
      
      const actualCount = realCount || 0;
      const currentCount = tag.usage_count || 0;
      
      // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
      if (actualCount !== currentCount) {
        const { error: updateError } = await supabase
          .from('tags')
          .update({ usage_count: actualCount })
          .eq('id', tag.id);
        
        if (updateError) {
          logger.error('ADMIN', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–µ–≥–∞', { tagId: tag.id, error: updateError });
          continue;
        }
        
        fixedCount++;
        results.push({
          tagId: tag.id,
          tagName: tag.name,
          oldCount: currentCount,
          newCount: actualCount
        });
        
        logger.info('ADMIN', '–°—á–µ—Ç—á–∏–∫ —Ç–µ–≥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', { 
          tagId: tag.id, 
          tagName: tag.name, 
          oldCount: currentCount, 
          newCount: actualCount 
        });
      }
    }
    
    logger.success('ADMIN', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', { 
      totalTags: tags.length, 
      fixedCount: fixedCount 
    });
    
    res.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –∏–∑ ${tags.length} —Ç–µ–≥–æ–≤`,
      totalTags: tags.length,
      fixedCount: fixedCount,
      results: results
    });
    
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–µ–≥–æ–≤', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–µ–≥–æ–≤' });
  }
});

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
 */
router.delete('/tags/bulk', requireAdmin, async (req, res) => {
  try {
    const { tagIds } = req.body;
    
    if (!tagIds || !Array.isArray(tagIds) || tagIds.length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ ID —Ç–µ–≥–æ–≤' });
    }
    
    logger.info('ADMIN', '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤', { tagIds, count: tagIds.length });
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ –æ–¥–Ω–æ–º—É
    for (const tagId of tagIds) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ
        const { data: tag } = await supabase
          .from('tags')
          .select('name, usage_count')
          .eq('id', tagId)
          .single();
        
        if (!tag) {
          errorCount++;
          errors.push(`–¢–µ–≥ —Å ID ${tagId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –≤–∏–¥–µ–æ
        const { error: videoTagsError } = await supabase
          .from('video_tags')
          .delete()
          .eq('tag_id', tagId);
        
        if (videoTagsError) {
          errorCount++;
          errors.push(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –¥–ª—è —Ç–µ–≥–∞ ${tag.name}`);
          continue;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞ –Ω–∞ 0 –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        const { error: updateError } = await supabase
          .from('tags')
          .update({ usage_count: 0 })
          .eq('id', tagId);
        
        if (updateError) {
          logger.warn('ADMIN', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–µ–≥–∞', { tagId, error: updateError.message });
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ–≥
        const { error: deleteError } = await supabase
          .from('tags')
          .delete()
          .eq('id', tagId);
        
        if (deleteError) {
          errorCount++;
          errors.push(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ ${tag.name}`);
          continue;
        }
        
        successCount++;
        logger.info('ADMIN', '–¢–µ–≥ —É–¥–∞–ª–µ–Ω', { tagId, tagName: tag.name });
        
      } catch (error) {
        errorCount++;
        errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ ${tagId}: ${error.message}`);
        logger.error('ADMIN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏', { tagId, error: error.message });
      }
    }
    
    logger.info('ADMIN', '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', { 
      total: tagIds.length, 
      success: successCount, 
      errors: errorCount 
    });
    
    res.json({
      message: '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      total: tagIds.length,
      successCount,
      errorCount,
      errors: errors.length > 0 ? errors : undefined
    });
    
  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤' });
  }
});

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
 */
router.post('/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
    
    req.session.destroy((err) => {
      if (err) {
        logger.error('ADMIN', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
      }
      
      res.clearCookie('connect.sid');
      res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥' });
    });
  });
});

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω–∫–∏
 */
router.get('/admin.css', (req, res) => {
  res.setHeader('Content-Type', 'text/css');
  res.sendFile(path.join(__dirname, '../views/admin.css'));
});

router.get('/admin.js', (req, res) => {
  res.setHeader('Content-Type', 'application/javascript');
  res.sendFile(path.join(__dirname, '../views/admin.js'));
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
 */
router.post('/generate-thumbnail', requireAdmin, async (req, res) => {
  try {
    const { videoUrl } = req.body;
    
    if (!videoUrl) {
      return res.status(400).json({ error: 'URL –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    logger.info('ADMIN', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é', { videoUrl });

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const thumbnailName = `admin_${Date.now()}.jpg`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –Ω–∞ 2 —Å–µ–∫—É–Ω–¥–µ
    await new Promise((resolve, reject) => {
      ffmpeg(videoUrl)
        .screenshots({
          timestamps: ['2'],
          filename: thumbnailName,
          folder: 'uploads/thumbnails',
          size: '320x240'
        })
        .on('end', resolve)
        .on('error', reject);
    });

    const thumbnailUrl = `${config.baseUrl}/uploads/thumbnails/${thumbnailName}`;

    logger.success('ADMIN', '–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ', { thumbnailUrl });
    res.json({
      success: true,
      thumbnailUrl: thumbnailUrl
    });

  } catch (error) {
    logger.error('ADMIN', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é' });
  }
});

module.exports = router;

