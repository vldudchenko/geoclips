/**
 * Rate Limiting middleware
 * –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ –ø–æ–¥—Å—á—ë—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

const logger = require('../utils/logger');

class RateLimiter {
  constructor() {
    this.requests = new Map();
    this.cleanupInterval = 60000; // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    setInterval(() => this.cleanup(), this.cleanupInterval);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
   */
  cleanup() {
    const now = Date.now();
    let cleaned = 0;
    
    for (const [key, data] of this.requests.entries()) {
      if (now - data.resetTime > 60000) {
        this.requests.delete(key);
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      logger.debug('RATE_LIMITER', `–û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${cleaned}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   * @param {Object} options - –û–ø—Ü–∏–∏
   * @param {number} options.windowMs - –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60000 = 1 –º–∏–Ω—É—Ç–∞)
   * @param {number} options.maxRequests - –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
   * @param {string} options.message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  create(options = {}) {
    const {
      windowMs = 60000, // 1 –º–∏–Ω—É—Ç–∞
      maxRequests = 100,
      message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    } = options;

    return (req, res, next) => {
      const key = this.getKey(req);
      const now = Date.now();
      
      let requestData = this.requests.get(key);
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –æ–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      if (!requestData || now - requestData.resetTime > windowMs) {
        requestData = {
          count: 0,
          resetTime: now
        };
        this.requests.set(key, requestData);
      }
      
      requestData.count++;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç: –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –≤ –¥–µ–≤-—Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      if (requestData.count > maxRequests) {
        const isProd = process.env.NODE_ENV === 'production';
        logger.info('RATE_LIMITER', `üìä –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω (${requestData.count}/${maxRequests})`, {
          key: key.substring(0, 50) + '...',
          count: requestData.count,
          maxRequests,
          url: req.url,
          method: req.method,
          env: process.env.NODE_ENV
        });

        if (isProd) {
          return res.status(429).json({
            error: message,
            code: 'RATE_LIMIT_EXCEEDED',
            retryAfter: Math.ceil((windowMs - (now - requestData.resetTime)) / 1000)
          });
        }
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      if (requestData.count % 10 === 0) {
        logger.debug('RATE_LIMITER', `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${requestData.count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      res.setHeader('X-RateLimit-Limit', maxRequests);
      res.setHeader('X-RateLimit-Remaining', maxRequests - requestData.count);
      res.setHeader('X-RateLimit-Reset', new Date(requestData.resetTime + windowMs).toISOString());
      
      next();
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getKey(req) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º IP + User Agent –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const ip = req.ip || req.connection.remoteAddress;
    const userAgent = req.get('user-agent') || 'unknown';
    return `${ip}_${userAgent}`;
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–ª—é—á–∞
   */
  reset(key) {
    this.requests.delete(key);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats() {
    return {
      totalKeys: this.requests.size,
      requests: Array.from(this.requests.entries()).map(([key, data]) => ({
        key: key.substring(0, 50) + '...', // –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        count: data.count,
        resetTime: new Date(data.resetTime).toISOString()
      }))
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const rateLimiter = new RateLimiter();

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
// –í–ê–ñ–ù–û: –õ–∏–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å—á—ë—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const limiters = {
  // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  auth: rateLimiter.create({
    windowMs: process.env.NODE_ENV === 'production' ? 15 * 60 * 1000 : 5 * 60 * 1000,
    maxRequests: process.env.NODE_ENV === 'production' ? 5 : 50,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }),

  // –°—á—ë—Ç—á–∏–∫ –¥–ª—è API
  api: rateLimiter.create({
    windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    maxRequests: 200,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
  }),

  // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  upload: rateLimiter.create({
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    maxRequests: 50,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.'
  }),

  // –°—á—ë—Ç—á–∏–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  read: rateLimiter.create({
    windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    maxRequests: 200,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
  })
};

module.exports = {
  rateLimiter,
  limiters
};

